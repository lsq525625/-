import { Disposable, TextDocument, ProviderResult, Range as VRange, Color, ColorPresentation, ColorInformation } from 'vscode';
import { ClientCapabilities, CancellationToken, ServerCapabilities, TextDocumentRegistrationOptions, DocumentSelector } from 'vscode-languageserver-protocol';
import { TextDocumentFeature, BaseLanguageClient } from './client';
export interface ProvideDocumentColorsSignature {
    (document: TextDocument, token: CancellationToken): ProviderResult<ColorInformation[]>;
}
export interface ProvideColorPresentationSignature {
    (color: Color, context: {
        document: TextDocument;
        range: VRange;
    }, token: CancellationToken): ProviderResult<ColorPresentation[]>;
}
export interface ColorProviderMiddleware {
    provideDocumentColors?: (this: void, document: TextDocument, token: CancellationToken, next: ProvideDocumentColorsSignature) => ProviderResult<ColorInformation[]>;
    provideColorPresentations?: (this: void, color: Color, context: {
        document: TextDocument;
        range: VRange;
    }, token: CancellationToken, next: ProvideColorPresentationSignature) => ProviderResult<ColorPresentation[]>;
}
export declare class ColorProviderFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {
    constructor(client: BaseLanguageClient);
    fillClientCapabilities(cap: ClientCapabilities): void;
    initialize(cap: ServerCapabilities, documentSelector: DocumentSelector): void;
    protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable;
    private asColor(color);
    private asColorInformations(colorInformation);
    private asColorPresentations(colorPresentations);
}

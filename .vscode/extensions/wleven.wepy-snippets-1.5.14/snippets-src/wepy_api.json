{
  "wepy.request": {
    "description": "网络请求"
  },
  "wepy.uploadFile": {
    "description": "文件上传"
  },
  "wepy.downloadFile": {
    "description": "文件下载"
  },
  "wepy.connectSocket": {
    "description": "创建Socket连接"
  },
  "wepy.onSocketOpen": {
    "description": "监听WebSocket连接打开事件"
  },
  "wepy.onSocketError": {
    "description": "监听WebSocket错误"
  },
  "wepy.sendSocketMessage": {
    "description":
      "通过 WebSocket 连接发送数据，需要先 wepy.connectSocket，并在 wepy.onSocketOpen 回调之后才能发送"
  },
  "wepy.onSocketMessage": {
    "description": "监听WebSocket接受到服务器的消息事件"
  },
  "wepy.closeSocket": {
    "body": ["wepy.closeSocket((res)=>{console.log('WebSocket 已关闭！')})"],
    "description": "关闭 WebSocket 连接"
  },
  "wepy.onSocketClose": {
    "body": ["wepy.onSocketClose((res)=>{console.log('WebSocket 已关闭！')})"],
    "description": "监听WebSocket关闭"
  },
  "wepy.chooseImage": {
    "body": [
      "wepy.chooseImage({",
      "  count:${1:9},//最多可以选择的图片张数",
      "  success:(res)=>{},//返回图片的本地文件路径列表 tempFilePaths",
      "  fail:()=>{},",
      "  complete:()=>{},",
      "})"
    ],
    "description": "从本地相册选择图片或使用相机拍照"
  },
  "wepy.previewImage": {
    "body": [
      "wepy.previewImage({",
      "  urls:${1:urls},//需要预览的图片链接列表",
      "})"
    ],
    "description": "预览图片"
  },
  "wepy.getImageInfo": {
    "body": [
      "wepy.getImageInfo({",
      "  src:'${1:src}',//图片的路径，可以是相对路径，临时文件路径，存储文件路径，网络图片路径",
      "  success:(res)=>{},",
      "  fail:()=>{},",
      "  complete:()=>{},",
      "})"
    ],
    "description": "获取图片信息"
  },
  "wepy.saveImageToPhotosAlbum": {
    "body": [
      "wepy.saveImageToPhotosAlbum({",
      "  filePath:'${1:filePath}',//图片文件路径，可以是临时文件路径也可以是永久文件路径，不支持网络图片路径",
      "  success:(res)=>{},",
      "  fail:()=>{},",
      "  complete:()=>{},",
      "})"
    ],
    "description": "保存图片到系统相册 需要用户授权 scope.writePhotosAlbum"
  },
  "wepy.login": {
    "body": [
      "wepy.login({",
      "  success:(res)=>{},",
      "  fail:()=>{},",
      "  complete:()=>{},",
      "})"
    ],
    "description": "调用接口wepy.login() 获取临时登录凭证（code）"
  },
  "wepy.checkSession": {
    "body": [
      "wepy.checkSession({",
      "  success:(res)=>{},",
      "  fail:()=>{},",
      "  complete:()=>{},",
      "})"
    ],
    "description": "校验用户当前session_key是否有效"
  },
  "wepy.authorize": {
    "body": [
      "wepy.authorize({",
      "  scope:'${1|scope.userInfo,scope.userLocation,scope.address,scope.invoiceTitle,scope.werun,scope.record,scope.writePhotosAlbum,scope.camera|}',",
      "  success:(res)=>{},",
      "  fail:()=>{},",
      "  complete:()=>{},",
      "})"
    ],
    "description":
      "提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。"
  },
  "wepy.getUserInfo": {
    "body": [
      "wepy.getUserInfo({",
      "  withCredentials:${1:false},",
      "  success:(res)=>{},",
      "  fail:()=>{},",
      "  complete:()=>{},",
      "})"
    ],
    "description":
      "获取用户信息，withCredentials 为 true 时需要先调用 wepy.login 接口。需要用户授权 scope.userInfo"
  },
  "wepy.requestPayment": {
    "body": [
      "wepy.requestPayment({",
      "  timeStamp:${1:timeStamp},//时间戳从1970年1月1日00:00:00至今的秒数,即当前的时间",
      "  nonceStr:'${2:nonceStr}',//随机字符串，长度为32个字符以下",
      "  package:${3:package},//统一下单接口返回的 prepay_id 参数值，提交格式如：prepay_id=*",
      "  signType:'MD5',//签名算法，暂支持 MD5",
      "  paySign:${1:paySign},//签名,具体签名方案参见小程序支付接口文档",
      "  success:(res)=>{},",
      "  fail:()=>{},",
      "  complete:()=>{},",
      "})"
    ],
    "description": "发起微信支付"
  },
  "wepy.onShareAppMessage": {
    "body": [
      "onShareAppMessage(){",
      "  return {",
      "  title: '${1:自定义转发标题}',",
      "  path: '${2:/pages/index}',",
      "  imageUrl:'${3:url}',",
      "  success:(res)=>{},",
      "  fail:()=>{},",
      "  complete:()=>{},",
      "  }",
      "}"
    ],
    "description": "在 Page 中定义 onShareAppMessage 函数，设置该页面的转发信息"
  },
  "wepy.showShareMenu": {
    "body": ["wepy.showShareMenu({", "  withShareTicket: true", "})"],
    "description": "显示当前页面的转发按钮"
  },
  "wepy.hideShareMenu": {
    "body": ["wepy.hideShareMenu()"],
    "description": "隐藏当前页面的转发按钮"
  },
  "wepy.updateShareMenu": {
    "body": ["wepy.updateShareMenu({", "  withShareTicket: true", "})"],
    "description": "更新转发属性"
  },
  "wepy.getShareInfo": {
    "body": ["wepy.getShareInfo({", "  withShareTicket: true", "})"],
    "description": "获取转发详细信息"
  },
  "wepy.chooseAddress": {
    "body": ["wepy.chooseAddress({", "  success: ()=>{}", "})"],
    "description":
      "调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址 需要用户授权 scope.address"
  },
  "wepy.addCard": {
    "body": [
      "wepy.addCard({",
      "  cardList: cardList,//需要添加的卡券列表，列表内对象说明请参见请求对象说明",
      "  success: (res)=> {}",
      "})"
    ],
    "description": "批量添加卡券"
  },
  "wepy.openCard": {
    "body": [
      "wepy.openCard({",
      "  cardList: cardList,//需要打开的卡券列表，列表内参数详见openCard 请求对象说明",
      "  success: (res)=> {}",
      "})"
    ],
    "description": "查看微信卡包中的卡券"
  },
  "wepy.openSetting": {
    "body": ["wepy.openSetting({", "  success: (res)=> {}", "})"],
    "description": "调起客户端小程序设置界面，返回用户设置的操作结果"
  },
  "wepy.getSetting": {
    "body": ["wepy.getSetting({", "  success: (res)=> {}", "})"],
    "description": "获取用户的当前设置"
  },
  "wepy.getWeRunData": {
    "body": ["wepy.getWeRunData({", "  success: (res)=> {}", "})"],
    "description":
      "获取用户过去三十天微信运动步数，需要先调用 wepy.login 接口 需要用户授权 scope.werun"
  },
  "wepy.navigateToMiniProgram": {
    "body": [
      "wepy.navigateToMiniProgram({",
      "  appId: '${1:appId}',//要打开的小程序 appId",
      "  path: '$1',//打开的页面路径，如果为空则打开首页",
      "  success: (res)=> {}",
      "})"
    ],
    "description":
      "打开同一公众号下关联的另一个小程序。（注：必须是同一公众号下，而非同个 open 账号下）"
  },
  "wepy.navigateBackMiniProgram": {
    "body": ["wepy.navigateBackMiniProgram({", "  success: (res)=> {}", "})"],
    "description":
      "返回到上一个小程序，只有在当前小程序是被其他小程序打开时可以调用成功"
  },
  "wepy.chooseInvoiceTitle": {
    "body": ["wepy.chooseInvoiceTitle({", "  success: (res)=> {}", "})"],
    "description": "选择用户的发票抬头 要用户授权 scope.invoiceTitle"
  },
  "wepy.checkIsSupportSoterAuthentication": {
    "body": [
      "wepy.checkIsSupportSoterAuthentication({",
      "  success: (res)=> {}",
      "})"
    ],
    "description": "获取本机支持的 SOTER 生物认证方式"
  },
  "wepy.startSoterAuthentication": {
    "body": [
      "wepy.startSoterAuthentication({",
      "  requestAuthModes:${1:requestAuthModes},//请求使用的可接受的生物认证方式",
      "  challenge:${2:requestAuthModes},//挑战因子。挑战因子为调用者为此次生物鉴权准备的用于签名的字符串关键识别信息，将作为result_json的一部分，供调用者识别本次请求",
      "  success: (res)=> {}",
      "})"
    ],
    "description": "开始 SOTER 生物认证"
  },
  "wepy.checkIsSoterEnrolledInDevice": {
    "body": [
      "wepy.checkIsSoterEnrolledInDevice({",
      "  checkAuthMode:${1|fingerPrint,facial,speech|},//认证方式",
      "  success: (res)=> {}",
      "})"
    ],
    "description": "获取设备内是否录入如指纹等生物信息的接口"
  },
  "wepy.getExtConfig": {
    "body": ["wepy.getExtConfig({", "  success: (res)=> {}", "})"],
    "description": "获取第三方平台自定义的数据字段。"
  },
  "wepy.getExtConfigSync": {
    "body": ["wepy.getExtConfigSync()"],
    "description": "获取第三方平台自定义的数据字段的同步接口"
  },
  "wepy.showToast": {
    "body": [
      "wepy.showToast({",
      "  title:${1:title},//提示的内容",
      "  icon:'${2| success,loading,none|}',//图标",
      "  duration:2000,//延迟时间",
      "  mask:true,//显示透明蒙层，防止触摸穿透",
      "  success: (res)=> {}",
      "})"
    ],
    "description": "显示消息提示框"
  },
  "wepy.showLoading": {
    "body": [
      "wepy.showLoading({",
      "  title:'${1:Loading...}',//提示的内容",
      "  mask:true,//显示透明蒙层，防止触摸穿透",
      "  success: (res)=> {}",
      "})"
    ],
    "description":
      "显示 loading 提示框, 需主动调用 wepy.hideLoading 才能关闭提示框"
  },
  "wepy.hideToast": {
    "body": ["wepy.hideToast()"],
    "description": "隐藏消息提示框"
  },
  "wepy.hideLoading": {
    "body": ["wepy.hideLoading()"],
    "description": "隐藏loading提示框"
  },
  "wepy.showModal": {
    "body": [
      "wepy.showModal({",
      "  title:'${1:提示}',//提示的标题",
      "  content:'${2:content}',//提示的内容",
      "  showCancel:true,//是否显示取消按钮",
      "  cancelText:'${3:取消}',//取消按钮的文字，默认为取消，最多 4 个字符",
      "  cancelColor:'${4:#000000}',//取消按钮的文字颜色",
      "  confirmText:'${5:取消}',//确定按钮的文字，默认为取消，最多 4 个字符",
      "  confirmColor:'${6:#3CC51F}',//确定按钮的文字颜色",
      "  success: (res)=> {}",
      "})"
    ],
    "description": "​显示模态弹窗"
  },
  "wepy.showActionSheet": {
    "body": [
      "wepy.showActionSheet({",
      "  itemList:${1:itemList},//按钮的文字数组，数组长度最大为6个",
      "  itemColor:'${2:#000000}',//按钮的文字颜色",
      "  success: (res)=> {}",
      "})"
    ],
    "description": "​​显示操作菜单"
  },
  "wepy.setNavigationBarTitle": {
    "body": ["wepy.setNavigationBarTitle({", "  title:${1:title},", "})"],
    "description": "​​动态设置当前页面的标题"
  },
  "wepy.showNavigationBarLoading": {
    "body": ["wepy.showNavigationBarLoading()"],
    "description": "在当前页面显示导航条加载动画"
  },
  "wepy.hideNavigationBarLoading": {
    "body": ["wepy.hideNavigationBarLoading()"],
    "description": "隐藏导航条加载动画"
  },
  "wepy.setNavigationBarColor": {
    "body": [
      "wepy.setNavigationBarColor({",
      "  frontColor:'${1:#ffffff}',//前景颜色值，包括按钮、标题、状态栏的颜色，仅支持 #ffffff 和 #000000",
      "  backgroundColor:'${2:#ff0000}',//背景颜色值，有效值为十六进制颜色",
      "  success: (res)=> {}",
      "})"
    ],
    "description": "​​设置导航条颜色"
  },
  "wepy.setTabBarBadge": {
    "body": [
      "wepy.setTabBarBadge({",
      "  index:${1:0},//tabBar的哪一项，从左边算起",
      "  text:'${2:1}',//显示的文本，超过 3 个字符则显示成“…”",
      "})"
    ],
    "description": "​​为 tabBar 某一项的右上角添加文本"
  },
  "wepy.removeTabBarBadge": {
    "body": [
      "wepy.removeTabBarBadge({",
      "  index:${1:0},//tabBar的哪一项，从左边算起",
      "})"
    ],
    "description": "​​移除 tabBar 某一项右上角的文本"
  },
  "wepy.showTabBarRedDot": {
    "body": [
      "wepy.showTabBarRedDot({",
      "  index:${1:0},//tabBar的哪一项，从左边算起",
      "})"
    ],
    "description": "​​显示 tabBar 某一项的右上角的红点"
  },
  "wepy.hideTabBarRedDot": {
    "body": [
      "wepy.hideTabBarRedDot({",
      "  index:${1:0},//tabBar的哪一项，从左边算起",
      "})"
    ],
    "description": "​​隐藏 tabBar 某一项的右上角的红点"
  },
  "wepy.setTabBarStyle": {
    "body": [
      "wepy.setTabBarStyle({",
      "  color:'${1:#FF0000}',//tab 上的文字默认颜色",
      "  selectedColor:'${2:#00FF00}',//tab 上的文字选中时的颜色",
      "  backgroundColor:'${3:#0000FF}',//tab 的背景色",
      "  borderStyle:'${4:white}',//tabbar上边框的颜色， 仅支持 black/white",
      "})"
    ],
    "description": "​​动态设置 tabBar 的整体样式"
  },
  "wepy.setTabBarItem": {
    "body": [
      "wepy.setTabBarItem({",
      "  index:${1:0},//tabBar的哪一项，从左边算起",
      "  text:'${2:text}',//tab 上按钮文字",
      "  iconPath:${3:iconPath},//图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片",
      "  selectedIconPath:${4:selectedIconPath},//选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效",
      "})"
    ],
    "description": "​​动态设置 tabBar 某一项的内容"
  },
  "wepy.showTabBar": {
    "body": ["wepy.showTabBar({", "  animation:true,//是否需要动画效果", "})"],
    "description": "​​显示 tabBar"
  },
  "wepy.hideTabBar": {
    "body": ["wepy.hideTabBar({", "  animation:true,//是否需要动画效果", "})"],
    "description": "​​隐藏 tabBar"
  },
  "wepy.setTopBarText": {
    "body": ["wepy.setTopBarText({", "  text:'${1:text}',", "})"],
    "description": "​​动态设置置顶栏文字内容，只有当前小程序被置顶时能生效"
  },
  "wepy.navigateTo": {
    "body": ["wepy.navigateTo({", "  url:'${1:url}',", "})"],
    "description":
      "保留当前页面，跳转到应用内的某个页面，使用wepy.navigateBack可以返回到原页面。"
  },
  "wepy.redirectTo": {
    "body": ["wepy.redirectTo({", "  url:'${1:url}',", "})"],
    "description": "关闭当前页面，跳转到应用内的某个页面"
  },
  "wepy.reLaunch": {
    "body": ["wepy.reLaunch({", "  url:'${1:url}',", "})"],
    "description": "关闭所有页面，打开到应用内的某个页面"
  },
  "wepy.switchTab": {
    "scope": "javascript,typescript",
    "prefix": "wepy.switchTab",
    "body": ["wepy.switchTab({", "  url:'${1:url}',", "})"],
    "description": "跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面"
  },
  "wepy.navigateBack": {
    "body": [
      "wepy.navigateBack({",
      "  delta:'${1:1}',//返回的页面数，如果 delta 大于现有页面数，则返回到首页",
      "})"
    ],
    "description":
      "关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages()) 获取当前的页面栈，决定需要返回几层"
  },
  "wepy.createAnimation": {
    "body": ["wepy.createAnimation({", "})"],
    "description":
      "创建一个动画实例animation。调用实例的方法来描述动画。最后通过动画实例的export方法导出动画数据传递给组件的animation属性"
  },
  "wepy.pageScrollTo": {
    "body": [
      "wepy.pageScrollTo({",
      "  scrollTop:${1:1},//滚动到页面的目标位置（单位px）",
      "  duration:${2:300},//滚动动画的时长，默认300ms，单位 ms",
      "})"
    ],
    "description": "将页面滚动到目标位置"
  },
  "wepy.startPullDownRefresh": {
    "body": ["wepy.startPullDownRefresh({", "  success:(res)=>{}", "})"],
    "description":
      "开始下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致"
  },
  "wepy.stopPullDownRefresh": {
    "body": ["wepy.stopPullDownRefresh()"],
    "description": "停止下拉刷新"
  },
  "wepy.makePhoneCall": {
    "body": ["wepy.makePhoneCall({", "  phoneNumber:'${1:00000000}'", "})"],
    "description": "拨打电话"
  },
  "wepy.getLocation": {
    "body": [
      "wepy.getLocation({",
      "  type:'${1|wgs84,gcj02|}',//默认为 wgs84 返回 gps 坐标，gcj02 返回可用于wepy.openLocation的坐标",
      "  success:(res=>{})",
      "})"
    ],
    "description":
      "获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用；当用户点击“显示在聊天顶部”时，此接口可继续调用"
  },
  "wepy.chooseLocation": {
    "body": ["wepy.chooseLocation({", "  success:(res=>{})", "})"],
    "description": "打开地图选择位置 需要用户授权 scope.userLocation"
  },
  "wepy.openLocation": {
    "body": [
      "wepy.openLocation({",
      "  latitude:${1:latitude},//纬度，范围为-90~90，负数表示南纬",
      "  longitude:${2:longitude},//经度，范围为-180~180，负数表示西经",
      "  scale:${3:15},//缩放比例，范围5~18",
      "  name:'${4:name}',//位置名",
      "  address:'${5:address}',//地址的详细说明",
      "  success:(res=>{})",
      "})"
    ],
    "description": "使用微信内置地图查看位置 需要用户授权 scope.userLocation"
  },
  "wepy.setStorage": {
    "body": [
      "wepy.setStorage({",
      "  key:'${1:key}',",
      "  value:'${2:value}',",
      "})"
    ],
    "description":
      "将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口"
  },
  "wepy.setStorageSync": {
    "body": [
      "wepy.setStorageSync({",
      "  key:'${1:key}',",
      "  value:'${2:value}',",
      "})"
    ],
    "description":
      "将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口"
  },
  "wepy.getStorage": {
    "body": [
      "wepy.getStorage({",
      "  key:'${1:key}',",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "从本地缓存中异步获取指定 key 对应的内容"
  },
  "wepy.getStorageSync": {
    "body": ["wepy.getStorageSync({", "  key:'${1:key}',", "})"],
    "description": "从本地缓存中同步获取指定 key 对应的内容"
  },
  "wepy.getStorageInfo": {
    "body": ["wepy.getStorageInfo({", "  success:(res)=>{}", "})"],
    "description": "异步获取当前storage的相关信息"
  },
  "wepy.getStorageInfoSync": {
    "body": ["wepy.getStorageInfoSync()"],
    "description": "同步获取当前storage的相关信息"
  },
  "wepy.removeStorage": {
    "body": [
      "wepy.removeStorage({",
      "  key:'${1:key}',",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "从本地缓存中异步移除指定 key"
  },
  "wepy.removeStorageSync": {
    "body": ["wepy.removeStorageSync({", "  key:'${1:key}',", "})"],
    "description": "从本地缓存中同步移除指定 key"
  },
  "wepy.clearStorage": {
    "body": ["wepy.clearStorage()"],
    "description": "清理本地数据缓存"
  },
  "wepy.clearStorageSync": {
    "body": ["wepy.clearStorageSync()"],
    "description": "同步清理本地数据缓存"
  },
  "wepy.saveFile": {
    "body": [
      "wepy.saveFile({",
      "  tempFilePath:'${1:tempFilePath}',//需要保存的文件的临时路径",
      "  success:(res)=>{}",
      "})"
    ],
    "description":
      "保存文件到本地。注意：saveFile 会把临时文件移动，因此调用成功后传入的 tempFilePath 将不可用"
  },
  "wepy.getFileInfo": {
    "body": [
      "wepy.getFileInfo({",
      "  filePath:'${1:filePath}',//本地文件路径",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "获取文件信息"
  },
  "wepy.getSavedFileList": {
    "body": ["wepy.getSavedFileList({", "  success:(res)=>{}", "})"],
    "description": "获取本地已保存的文件列表"
  },
  "wepy.getSavedFileInfo": {
    "body": [
      "wepy.getSavedFileInfo({",
      "  filePath:'${1:filePath}',//文件路径",
      "  success:(res)=>{}",
      "})"
    ],
    "description":
      "获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用 wepy.getFileInfo 接口"
  },
  "wepy.removeSavedFile": {
    "body": [
      "wepy.removeSavedFile({",
      "  filePath:'${1:filePath}',//文件路径",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "删除本地存储的文件"
  },
  "wepy.openDocument": {
    "body": [
      "wepy.openDocument({",
      "  filePath:'${1:filePath}',//文件路径，可通过 downFile 获得",
      "  success:(res)=>{}",
      "})"
    ],
    "description":
      "新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx"
  },
  "wepy.getSystemInfo": {
    "body": ["wepy.getSystemInfo({", "  success:(res)=>{}", "})"],
    "description": "获取系统信息"
  },
  "wepy.getSystemInfoSync": {
    "body": ["wepy.getSystemInfoSync()"],
    "description": "获取系统信息同步接口"
  },
  "wepy.getNetworkType": {
    "body": ["wepy.getNetworkType({", "  success:(res)=>{}", "})"],
    "description": "获取网络类型"
  },
  "wepy.onNetworkStatusChange": {
    "body": ["wepy.onNetworkStatusChange((res)=>{})"],
    "description": "监听网络状态变化"
  },
  "wepy.onAccelerometerChange": {
    "body": ["wepy.onAccelerometerChange((res)=>{})"],
    "description":
      "监听加速度数据，频率：5次/秒，接口调用后会自动开始监听，可使用 wepy.stopAccelerometer 停止监听"
  },
  "wepy.startAccelerometer": {
    "body": ["wepy.startAccelerometer()"],
    "description": "开始监听加速度数据"
  },
  "wepy.stopAccelerometer": {
    "body": ["wepy.stopAccelerometer()"],
    "description": "停止监听加速度数据"
  },
  "wepy.onCompassChange": {
    "body": ["wepy.onCompassChange((res)=>{})"],
    "description":
      "监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用wepy.stopCompass停止监听"
  },
  "wepy.startCompass": {
    "body": ["wepy.startCompass()"],
    "description": "开始监听罗盘数据"
  },
  "wepy.stopCompass": {
    "body": ["wepy.stopCompass()"],
    "description": "停止监听罗盘数据"
  },
  "wepy.scanCode": {
    "body": [
      "wepy.scanCode({",
      "  onlyFromCamera:${1:true},//是否只能从相机扫码，不允许从相册选择图片",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "调起客户端扫码界面，扫码成功后返回对应的结果"
  },
  "wepy.setClipboardData": {
    "body": [
      "wepy.setClipboardData({",
      "  data:${1:data},//需要设置的内容",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "设置系统剪贴板的内容"
  },
  "wepy.getClipboardData": {
    "body": ["wepy.getClipboardData({", "  success:(res)=>{}", "})"],
    "description": "获取系统剪贴板内容"
  },
  "wepy.openBluetoothAdapter": {
    "body": ["wepy.openBluetoothAdapter({", "  success:(res)=>{}", "})"],
    "description":
      "初始化小程序蓝牙模块，生效周期为调用wepy.openBluetoothAdapter至调用wepy.closeBluetoothAdapter或小程序被销毁为止"
  },
  "wepy.closeBluetoothAdapter": {
    "body": ["wepy.closeBluetoothAdapter({", "  success:(res)=>{}", "})"],
    "description":
      "关闭蓝牙模块，使其进入未初始化状态。调用该方法将断开所有已建立的链接并释放系统资源"
  },
  "wepy.getBluetoothAdapterState": {
    "body": ["wepy.getBluetoothAdapterState({", "  success:(res)=>{}", "})"],
    "description": "获取本机蓝牙适配器状态"
  },
  "wepy.onBluetoothAdapterStateChange": {
    "body": ["wepy.onBluetoothAdapterStateChange((res)=>{})"],
    "description": "监听蓝牙适配器状态变化事件"
  },
  "wepy.startBluetoothDevicesDiscovery": {
    "body": [
      "wepy.startBluetoothDevicesDiscovery({",
      "  success:(res)=>{}",
      "})"
    ],
    "description":
      "开始搜寻附近的蓝牙外围设备。注意，该操作比较耗费系统资源，请在搜索并连接到设备后调用 stop 方法停止搜索"
  },
  "wepy.stopBluetoothDevicesDiscovery": {
    "body": [
      "wepy.stopBluetoothDevicesDiscovery({",
      "  success:(res)=>{}",
      "})"
    ],
    "description":
      "停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索"
  },
  "wepy.getBluetoothDevices": {
    "body": ["wepy.getBluetoothDevices({", "  success:(res)=>{}", "})"],
    "description":
      "获取在小程序蓝牙模块生效期间所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备"
  },
  "wepy.onBluetoothDeviceFound": {
    "body": ["wepy.onBluetoothDeviceFound((res)=>{})"],
    "description": "监听寻找到新设备的事件"
  },
  "wepy.getConnectedBluetoothDevices": {
    "body": [
      "wepy.getConnectedBluetoothDevices({",
      "  services:${1:services},//蓝牙设备主 service 的 uuid 列表",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "根据 uuid 获取处于已连接状态的设备"
  },
  "wepy.createBLEConnection": {
    "body": [
      "wepy.createBLEConnection({",
      "  deviceId:${1:deviceId},//蓝牙设备 id，参考 getDevices 接口",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "连接低功耗蓝牙设备"
  },
  "wepy.closeBLEConnection": {
    "body": [
      "wepy.closeBLEConnection({",
      "  deviceId:${1:deviceId},//蓝牙设备 id，参考 getDevices 接口",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "断开与低功耗蓝牙设备的连接"
  },
  "wepy.onBLEConnectionStateChange": {
    "body": ["wepy.onBLEConnectionStateChange((res)=>{})"],
    "description":
      "监听低功耗蓝牙连接状态的改变事件，包括开发者主动连接或断开连接，设备丢失，连接异常断开等等"
  },
  "wepy.getBLEDeviceServices": {
    "body": [
      "wepy.getBLEDeviceServices({",
      "  deviceId:${1:deviceId},//蓝牙设备 id，参考 getDevices 接口",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "获取蓝牙设备所有 service（服务）"
  },
  "wepy.getBLEDeviceCharacteristics": {
    "body": [
      "wepy.getBLEDeviceCharacteristics({",
      "  deviceId:${1:deviceId},//蓝牙设备 id，参考 device 对象",
      "  serviceId:${2:serviceId},//蓝牙服务 uuid",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "获取蓝牙设备某个服务中的所有 characteristic（特征值）"
  },
  "wepy.readBLECharacteristicValue": {
    "body": [
      "wepy.readBLECharacteristicValue({",
      "  deviceId:${1:deviceId},//蓝牙设备 id，参考 device 对象",
      "  serviceId:${2:serviceId},//蓝牙服务 uuid",
      "  characteristicId:${3:characteristicId},//蓝牙特征值的 uuid",
      "  success:(res)=>{}",
      "})"
    ],
    "description":
      "读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持read才可以成功调用，具体参照 characteristic 的 properties 属性"
  },
  "wepy.writeBLECharacteristicValue": {
    "body": [
      "wepy.writeBLECharacteristicValue({",
      "  deviceId:${1:deviceId},//蓝牙设备 id，参考 device 对象",
      "  serviceId:${2:serviceId},//蓝牙服务 uuid",
      "  characteristicId:${3:characteristicId},//蓝牙特征值的 uuid",
      "  value:${4:value},//蓝牙设备特征值对应的二进制值",
      "  success:(res)=>{}",
      "})"
    ],
    "description":
      "读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持read才可以成功调用，具体参照 characteristic 的 properties 属性"
  },
  "wepy.notifyBLECharacteristicValueChange": {
    "body": [
      "wepy.notifyBLECharacteristicValueChange({",
      "  deviceId:${1:deviceId},//蓝牙设备 id，参考 device 对象",
      "  serviceId:${2:serviceId},//蓝牙服务 uuid",
      "  characteristicId:${3:characteristicId},//蓝牙特征值的 uuid",
      "  state:${4:true},//true: 启用 notify; false: 停用 notify",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值"
  },
  "wepy.onBLECharacteristicValueChange": {
    "body": ["wepy.onBLECharacteristicValueChange((res)=>{})"],
    "description":
      "监听低功耗蓝牙设备的特征值变化。必须先启用notify接口才能接收到设备推送的notification"
  },
  "wepy.startBeaconDiscovery": {
    "body": [
      "wepy.startBeaconDiscovery({",
      "  uuids:${1:uuids},//iBeacon设备广播的 uuids",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "开始搜索附近的iBeacon设备"
  },
  "wepy.stopBeaconDiscovery": {
    "body": ["wepy.stopBeaconDiscovery()"],
    "description": "停止搜索附近的iBeacon设备"
  },
  "wepy.getBeacons": {
    "body": ["wepy.getBeacons({", "  success:(res)=>{}", "})"],
    "description": "获取所有已搜索到的iBeacon设备"
  },
  "wepy.onBeaconUpdate": {
    "body": ["wepy.onBeaconUpdate((res)=>{})"],
    "description": "监听 iBeacon 设备的更新事件"
  },
  "wepy.onBeaconServiceChange": {
    "body": ["wepy.onBeaconServiceChange((res)=>{})"],
    "description": "监听 iBeacon 服务的状态变化"
  },
  "wepy.setScreenBrightness": {
    "body": [
      "wepy.setScreenBrightness({",
      "  value:${1:1},//屏幕亮度值，范围 0~1，0 最暗，1 最亮",
      "})"
    ],
    "description": "设置屏幕亮度"
  },
  "wepy.getScreenBrightness": {
    "body": ["wepy.getScreenBrightness({", "  success:(res)=>{}", "})"],
    "description": "获取屏幕亮度"
  },
  "wepy.setKeepScreenOn": {
    "body": [
      "wepy.setKeepScreenOn({",
      "  keepScreenOn:${1:true},//是否保持屏幕常亮",
      "})"
    ],
    "description":
      "设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效"
  },
  "wepy.onUserCaptureScreen": {
    "body": ["wepy.onUserCaptureScreen((res)=>{})"],
    "description": "监听用户主动截屏事件，用户使用系统截屏按键截屏时触发此事件"
  },
  "wepy.vibrateLong": {
    "body": ["wepy.vibrateLong()"],
    "description": "使手机发生较长时间的振动（400ms）"
  },
  "wepy.vibrateShort": {
    "body": ["wepy.vibrateShort()"],
    "description": "使手机发生较短时间的振动（15ms）"
  },
  "wepy.getHCEState": {
    "body": ["wepy.getHCEState({", "  success:(res)=>{}", "})"],
    "description": "判断当前设备是否支持 HCE 能力"
  },
  "wepy.startHCE": {
    "body": [
      "wepy.startHCE({",
      "  aid_list:${1:aid_list},//需要注册到系统的 AID 列表，每个 AID 为 String 类型",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "初始化 NFC 模块"
  },
  "wepy.stopHCE": {
    "body": ["wepy.stopHCE({", "  success:(res)=>{}", "})"],
    "description": "关闭 NFC 模块 仅在安卓系统下有效"
  },
  "wepy.onHCEMessage": {
    "body": ["wepy.onHCEMessage((res)=>{})"],
    "description": "监听 NFC 设备的消息回调，并在回调中处理"
  },
  "wepy.sendHCEMessage": {
    "body": [
      "wepy.sendHCEMessage({",
      "  data:${1:data},//二进制数据",
      "  success:(res)=>{}",
      "})"
    ],
    "description": "发送 NFC 消息。仅在安卓系统下有效"
  },
  "wepy.startWifi": {
    "body": ["wepy.startWifi({", "  success:(res)=>{}", "})"],
    "description": "初始化 Wi-Fi 模块"
  },
  "wepy.stopWifi": {
    "body": ["wepy.stopWifi({", "  success:(res)=>{}", "})"],
    "description": "关闭 Wi-Fi 模块"
  },
  "wepy.connectWifi": {
    "body": [
      "wepy.connectWifi({",
      "  SSID:${1:SSID},//Wi-Fi 设备ssid",
      "  BSSID:${2:BSSID},//Wi-Fi 设备BSSID",
      "  password:${3:password},//Wi-Fi 设备password",
      "  success:(res)=>{}",
      "})"
    ],
    "description":
      "连接 Wi-Fi。若已知 Wi-Fi 信息，可以直接利用该接口连接。仅 Android 与 iOS 11 以上版本支持"
  },
  "wepy.getWifiList": {
    "body": ["wepy.getWifiList({", "  success:(res)=>{}", "})"],
    "description": "请求获取 Wi-Fi 列表"
  },
  "wepy.getConnectedWifi": {
    "body": ["wepy.getConnectedWifi({", "  success:(res)=>{}", "})"],
    "description": "获取已连接中的 Wi-Fi 信息"
  },
  "wepy.onGetWifiList": {
    "body": ["wepy.onGetWifiList((res)=>{})"],
    "description":
      "监听在获取到 Wi-Fi 列表数据时的事件，在回调中将返回 wifiList"
  },
  "wepy.onWifiConnected": {
    "body": ["wepy.onWifiConnected((res)=>{})"],
    "description": "监听连接上 Wi-Fi 的事件"
  },
  "wepy.setWifiList": {
    "body": [
      "wepy.setWifiList({",
      "  wifiList:${1:wifiList},//提供预设的 Wi-Fi 信息列表",
      "  success:(res)=>{}",
      "})"
    ],
    "description":
      "iOS特有接口 在 onGetWifiList 回调后，利用接口设置 wifiList 中 AP 的相关信息"
  }
}

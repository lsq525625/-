"use strict";
/******************************************************************
 MIT License http://www.opensource.org/licenses/mit-license.php
 Author Mora <qiuzhongleiabc@126.com> (https://github.com/qiu8310)
*******************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var CacheableFile_1 = require("./CacheableFile");
var ConditionalCacheableFile = /** @class */ (function () {
    function ConditionalCacheableFile(getFilePathFn, parseFileContent) {
        this.getFilePathFn = getFilePathFn;
        this.parseFileContent = parseFileContent;
    }
    ConditionalCacheableFile.prototype.getFile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var filepath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getFilePathFn()];
                    case 1:
                        filepath = _a.sent();
                        this.cacheableFile = filepath ? new CacheableFile_1.CacheableFile(filepath) : undefined;
                        this.filename = filepath;
                        return [2 /*return*/, this.cacheableFile];
                }
            });
        });
    };
    ConditionalCacheableFile.prototype.tryGetFileContent = function () {
        return __awaiter(this, void 0, void 0, function () {
            var file, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getFile()];
                    case 1:
                        file = _b.sent();
                        if (!file) return [3 /*break*/, 3];
                        return [4 /*yield*/, file.getContent()];
                    case 2:
                        _a = (_b.sent());
                        return [3 /*break*/, 4];
                    case 3:
                        _a = undefined;
                        _b.label = 4;
                    case 4: return [2 /*return*/, _a];
                }
            });
        });
    };
    ConditionalCacheableFile.prototype.getContent = function () {
        return __awaiter(this, void 0, void 0, function () {
            var content, e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.cached = false;
                        if (!this.cacheableFile) return [3 /*break*/, 8];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 7]);
                        return [4 /*yield*/, this.cacheableFile.getContent()];
                    case 2:
                        content = _b.sent();
                        this.cached = this.cacheableFile.cached;
                        return [3 /*break*/, 7];
                    case 3:
                        e_1 = _b.sent();
                        if (!(e_1.code === 'ENOENT')) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.tryGetFileContent()];
                    case 4:
                        content = _b.sent();
                        return [3 /*break*/, 6];
                    case 5: throw e_1;
                    case 6: return [3 /*break*/, 7];
                    case 7: return [3 /*break*/, 10];
                    case 8: return [4 /*yield*/, this.tryGetFileContent()];
                    case 9:
                        content = _b.sent();
                        _b.label = 10;
                    case 10:
                        if (content === undefined || !this.parseFileContent)
                            return [2 /*return*/, content];
                        if (!(!this.cached || this.cachedParseContent === undefined)) return [3 /*break*/, 12];
                        _a = this;
                        return [4 /*yield*/, this.parseFileContent(this.filename, content)];
                    case 11:
                        _a.cachedParseContent = _b.sent();
                        _b.label = 12;
                    case 12: return [2 /*return*/, this.cachedParseContent];
                }
            });
        });
    };
    return ConditionalCacheableFile;
}());
exports.ConditionalCacheableFile = ConditionalCacheableFile;

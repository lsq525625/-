"use strict";
/******************************************************************
 MIT License http://www.opensource.org/licenses/mit-license.php
 Author Mora <qiuzhongleiabc@126.com> (https://github.com/qiu8310)
*******************************************************************/
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
  先尝试解析单行的情况，再解析多行情况

  单行如：
    properties: {foo: Number, bar: {type: String, others: {type: Number}}}

  多行如：
    properties = {
      foo: Number,
      bar: {
        type: String,
        others: {
          type: Number
        }
      }
    }
*/
var SINGLE_LINE_REGEXP = /^\s+(?:\w+.)?properties\s*[:=]\s*\{(.*)\}\s*$/m;
var MULTIPLE_LINE_START_REGEXP = /^(\s+)(?:\w+.)?properties\s*[:=]\s*\{(.*?)$/;
var DOC_REGEXP = /\/\*\*([\s\S]*?)\*\/[\s\n\r]*(\w+)\s*:/g;
var TYPE_REGEXP = /^function\s+(\w+)\(/;
function parseAttrs(content) {
    var attrs;
    if (SINGLE_LINE_REGEXP.test(content)) {
        attrs = parseObjStr(RegExp.$1);
    }
    if (!attrs) {
        var flag_1 = 0;
        var spaces_1 = '';
        var objstr_1 = '';
        content.split(/\r?\n/).forEach(function (l) {
            if (flag_1 === 2)
                return;
            if (flag_1 === 1) {
                if (l.trimRight() === spaces_1 + '}')
                    flag_1 = 2;
                else
                    objstr_1 += '\n' + l;
            }
            else if (MULTIPLE_LINE_START_REGEXP.test(l)) {
                flag_1 = 1;
                spaces_1 = RegExp.$1;
                objstr_1 += RegExp.$2;
            }
        });
        if (flag_1 === 2)
            attrs = parseObjStr(objstr_1);
    }
    return attrs || [];
}
exports.parseAttrs = parseAttrs;
function parseObjStr(objstr) {
    try {
        var fn = new Function("return {" + objstr + "}");
        var obj_1 = fn();
        var attrs_1 = Object.keys(obj_1).map(function (name) {
            var val = obj_1[name];
            var defaultValue;
            if (val && typeof val !== 'function') {
                defaultValue = val.value;
                val = val.type;
            }
            var type = 'any';
            if (val && TYPE_REGEXP.test(val.toString())) {
                type = RegExp.$1.toLowerCase();
            }
            var attr = {
                name: name,
                type: {
                    name: type
                }
            };
            if (defaultValue !== undefined)
                attr.defaultValue = defaultValue;
            return attr;
        });
        objstr.replace(DOC_REGEXP, function (r, doc, name) {
            var index = attrs_1.findIndex(function (a) { return a.name === name; });
            if (index >= 0) {
                attrs_1[index] = __assign({}, attrs_1[index], parseDocStr(doc));
            }
            return r;
        });
        return attrs_1;
    }
    catch (e) {
        console.log('解析失败:', e.message);
        console.log("{" + objstr + "}");
    }
    return;
}
function parseDocStr(docstr) {
    var desc = [];
    var obj = {};
    var lines = docstr.split(/\r?\n/).map(function (k) { return k.replace(/^\s*\*\s*/, '').trim(); });
    var beforeAt = true;
    var lastLineIsEmpty = false;
    lines.forEach(function (line) {
        if (/^@(\w+)(?:\s+(.*))?$/.test(line)) {
            beforeAt = false;
            var key = RegExp.$1;
            var val = RegExp.$2;
            if (key === 'default') {
                key = 'defaultValue';
                try {
                    if (val)
                        val = JSON.parse(val);
                }
                catch (e) { }
            }
            obj[key] = val ? val : true;
        }
        else if (beforeAt) {
            if (line) {
                if (lastLineIsEmpty || !desc.length) {
                    desc.push(line);
                }
                else {
                    desc[desc.length - 1] += line;
                }
            }
            lastLineIsEmpty = line === '';
        }
    });
    if (obj.type)
        obj.type = { name: obj.type };
    if (desc.length)
        obj.desc = desc;
    return obj;
}

"use strict";
/******************************************************************
 MIT License http://www.opensource.org/licenses/mit-license.php
 Author Mora <qiuzhongleiabc@126.com> (https://github.com/qiu8310)
*******************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require("./lib/");
var _2 = require("./dev/");
var async_1 = require("mora-common/util/async");
var parseAttrs_1 = require("./parseAttrs");
var JSON5 = require("json5");
var path = require("path");
var JSON_CACHE = {};
function getCustomComponents(co) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        var f, data_1, jsonfile_1, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!co)
                        return [2 /*return*/, []];
                    f = getCachedJsonFile(co.filename);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 5, , 6]);
                    return [4 /*yield*/, f.getContent()];
                case 2:
                    data_1 = _a.sent();
                    jsonfile_1 = f.filename;
                    if (!(data_1 && data_1.usingComponents)) return [3 /*break*/, 4];
                    return [4 /*yield*/, async_1.map(Object.keys(data_1.usingComponents), function (name) { return __awaiter(_this, void 0, void 0, function () {
                            var filepath, comp, e_2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        filepath = data_1.usingComponents[name];
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, parseComponentFile(filepath, jsonfile_1, co.resolves)];
                                    case 2:
                                        comp = _a.sent();
                                        comp.name = name;
                                        return [2 /*return*/, comp];
                                    case 3:
                                        e_2 = _a.sent();
                                        return [2 /*return*/, { name: name }];
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); }, 0)];
                case 3: return [2 /*return*/, _a.sent()];
                case 4: return [3 /*break*/, 6];
                case 5:
                    e_1 = _a.sent();
                    return [3 /*break*/, 6];
                case 6: return [2 /*return*/, []];
            }
        });
    });
}
exports.getCustomComponents = getCustomComponents;
function parseComponentFile(filepath, refFile, resolves) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        var localResolves, found, f, data, attrs, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (filepath[0] === '~')
                        filepath = filepath.substr(1);
                    resolves = resolves || [];
                    localResolves = filepath[0] === '.' ? [path.dirname(refFile)] // 只使用相对目录
                        : filepath[0] === '/' ? resolves // 只使用绝对目录
                            : [path.dirname(refFile)].concat(resolves) // 使用相对和绝对目录
                    ;
                    return [4 /*yield*/, async_1.series(localResolves, function (root) { return __awaiter(_this, void 0, void 0, function () {
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (found)
                                            return [2 /*return*/];
                                        return [4 /*yield*/, async_1.series(['', '.js', '.ts'], function (ext) { return __awaiter(_this, void 0, void 0, function () {
                                                var f, stats, pkg, f1, f2, e_3;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            if (found)
                                                                return [2 /*return*/];
                                                            f = path.join(root, filepath + ext);
                                                            _a.label = 1;
                                                        case 1:
                                                            _a.trys.push([1, 8, , 9]);
                                                            return [4 /*yield*/, _1.stat(f)];
                                                        case 2:
                                                            stats = _a.sent();
                                                            if (!stats.isFile()) return [3 /*break*/, 3];
                                                            found = f;
                                                            return [3 /*break*/, 7];
                                                        case 3:
                                                            if (!(stats.isDirectory() && ext === '')) return [3 /*break*/, 7];
                                                            if (f.indexOf('node_modules') >= 0) {
                                                                try {
                                                                    pkg = require(path.join(f, 'package.json'));
                                                                    if (pkg.main)
                                                                        found = path.resolve(f, pkg.main);
                                                                }
                                                                catch (e) { }
                                                            }
                                                            if (!!found) return [3 /*break*/, 7];
                                                            f1 = path.join(f, 'index.js');
                                                            f2 = path.join(f, 'index.ts');
                                                            return [4 /*yield*/, _1.exists(f1)];
                                                        case 4:
                                                            if (!_a.sent()) return [3 /*break*/, 5];
                                                            found = f1;
                                                            return [3 /*break*/, 7];
                                                        case 5: return [4 /*yield*/, _1.exists(f2)];
                                                        case 6:
                                                            if (_a.sent())
                                                                found = f2;
                                                            _a.label = 7;
                                                        case 7: return [3 /*break*/, 9];
                                                        case 8:
                                                            e_3 = _a.sent();
                                                            return [3 /*break*/, 9];
                                                        case 9: return [2 /*return*/];
                                                    }
                                                });
                                            }); })];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 1:
                    _b.sent();
                    if (!found) return [3 /*break*/, 4];
                    f = getCachedJsonFile(found);
                    return [4 /*yield*/, f.getContent()];
                case 2:
                    data = _b.sent();
                    if (data && data.minapp && data.minapp.component) {
                        return [2 /*return*/, data.minapp.component];
                    }
                    _a = parseAttrs_1.parseAttrs;
                    return [4 /*yield*/, _1.readFile(found)];
                case 3:
                    attrs = _a.apply(void 0, [(_b.sent()).toString()]);
                    if (attrs.length)
                        return [2 /*return*/, { attrs: attrs }];
                    _b.label = 4;
                case 4: return [2 /*return*/, {}];
            }
        });
    });
}
function getCachedJsonFile(filename) {
    var dir = path.dirname(filename);
    var base = path.basename(filename, path.extname(filename));
    var cacheKey = path.join(dir, base);
    if (!JSON_CACHE[cacheKey]) {
        JSON_CACHE[cacheKey] = new _1.ConditionalCacheableFile(function () { return getJsonFilePath(dir, base); }, function (name, buf) { return JSON5.parse(buf.toString()); });
    }
    return JSON_CACHE[cacheKey];
}
/**
 * 根据目录中的某个文件来获取当前目录中同名的 json 文件
 *
 * @export
 * @param {string} filename 目录中的某个文件
 */
function getJsonFilePath(dir, base) {
    return __awaiter(this, void 0, void 0, function () {
        var names, name;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    base += '.';
                    return [4 /*yield*/, _1.readdir(dir)];
                case 1:
                    names = _a.sent();
                    name = names.find(function (n) { return n.startsWith(base) && n.substr(base.length).indexOf('.') < 0 && _2.JSON_REGEXP.test(n); });
                    return [2 /*return*/, name ? path.join(dir, name) : undefined];
            }
        });
    });
}

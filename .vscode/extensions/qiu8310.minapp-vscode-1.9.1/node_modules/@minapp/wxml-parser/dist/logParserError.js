"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var clog = require("mora-scripts/libs/sys/clog");
var ELLIPSE = ' ... ';
function logParserError(source, e, extraLines, truncateSize) {
    if (extraLines === void 0) { extraLines = 3; }
    if (truncateSize === void 0) { truncateSize = 80; }
    var eol = '\n';
    var prevs = source.substring(0, e.index).split(eol);
    var rests = source.substr(e.index).split(eol);
    var p1 = prevs.pop();
    var p2 = rests.shift();
    var char = p2[0];
    p2 = p2.slice(1);
    var errLineNumber = prevs.length;
    var lines = prevs.concat([p1 + char + p2], rests);
    lines.forEach(function (l, i) {
        if (i === errLineNumber) {
            var redChar = clog.format('%c%s%c', 'red', char, 'reset');
            if (l.length > truncateSize) {
                l = truncate(p1, truncateSize * p1.length / l.length, 'left')
                    + redChar
                    + truncate(p2, truncateSize * p2.length / l.length, 'right');
            }
            else {
                l = p1 + redChar + p2;
            }
            clog("%c  Line " + i + ": %c%s", 'bold', 'reset', l);
            clog("%c          " + e.message, 'bold.red');
        }
        else if (Math.abs(i - errLineNumber) <= extraLines) {
            clog("%c  Line " + i + ": %c%s", 'bold', 'gray', truncate(l, truncateSize));
        }
    });
}
exports.logParserError = logParserError;
function truncate(str, size, type) {
    if (str.length <= size)
        return str;
    var el = ELLIPSE.length;
    str = type === 'left' ? str.slice(el - size) : str.substr(0, size - el);
    return type === 'left'
        ? ELLIPSE + str.slice(el - size)
        : str.substr(0, size - el) + ELLIPSE;
}

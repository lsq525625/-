export declare namespace Document {
    interface ToXMLOptions {
        prefix?: string;
        preferSpaces?: boolean;
        tabSize?: number;
        eol?: string;
        maxLineCharacters?: number;
        removeComment?: boolean;
        reserveTags?: string[];
    }
    type RequiredToXMLOptions = Required<ToXMLOptions> & {
        source: string;
    };
}
export declare class Document {
    source: string;
    constructor(source: string);
    nodes: Node[];
    toXML(opts?: Document.ToXMLOptions): string;
}
export declare enum TYPE {
    TAG = 0,
    TEXT = 1,
    COMMENT = 2,
}
export declare abstract class Location {
    start: number;
    end: number;
    constructor(start?: number, end?: number);
}
export declare abstract class Node extends Location {
    static TYPE: typeof TYPE;
    is(type: TYPE.TAG): this is TagNode;
    is(type: TYPE.TEXT): this is TextNode;
    is(type: TYPE.COMMENT): this is CommentNode;
}
export declare class CommentNode extends Node {
    comment: string;
    constructor(comment: string, start?: number, end?: number);
}
export declare class TextNode extends Node {
    content: string;
    constructor(content: string, start?: number, end?: number);
}
export declare class TagNode extends Node {
    name: string;
    attrs: TagNodeAttr[];
    children: Node[];
    selfClose?: boolean;
    contentStart?: number;
    contentEnd?: number;
    constructor(name: string, start?: number, end?: number);
    getAttr(key: string): TagNodeAttr | undefined;
}
export declare class TagNodeAttr extends Location {
    name: string;
    value: string | true;
    quote: string;
    constructor(name: string, value: string | true, quote: string, start?: number, end?: number);
    toXML(): string;
}

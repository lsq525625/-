/// <reference types="react" />
import * as React from 'react';
export declare type IResizableOnResize = (rect: ClientRect, lastRect: ClientRect | undefined) => void;
export declare type IResizableGetInsideContainer = () => Element;
export interface IResizableApplyOptions {
    direction?: 'width' | 'height' | Array<'width' | 'height'>;
    throttle?: number;
    debounce?: number;
}
export interface Resizable {
    __resizableOff?: any;
    __resizableRect?: ClientRect;
    getInsideContainer?: IResizableGetInsideContainer;
}
export declare abstract class Resizable extends React.PureComponent<any, any> {
    static apply({direction, throttle, debounce}?: IResizableApplyOptions): (Ctor: any) => any;
    abstract onResize(rect: ClientRect, lastRect: ClientRect | undefined): void;
}

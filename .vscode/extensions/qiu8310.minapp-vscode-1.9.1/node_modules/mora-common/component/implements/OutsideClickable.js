"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var ReactDOM = require("react-dom");
var applyMixins_1 = require("../../util/applyMixins");
var OutsideClickable = /** @class */ (function (_super) {
    tslib_1.__extends(OutsideClickable, _super);
    function OutsideClickable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * sensitive：默认情况下， react 绑定的 click 总会比手动绑定在 document 上的早触发，
     * 而且如果 react 的 click 有 setState 和 callback 总是会连续执行：可以理解为 setState -> render -> callback()
     * 当 sensitive 为 true 时，就可以保证手动绑定的事件比 react 绑定的先触发
     *
     * 使用手动绑定事件有个缺陷，就是 handle 不受 react 控制，所以每调用一次 setState 会立即触发 render 和 callback
     * 而不会等到函数执行完后将所有 state 综合起来再触发 render，所以在 onClickOutside 函数内要注意
     */
    OutsideClickable.apply = function (_a) {
        var _b = (_a === void 0 ? {} : _a).sensitive, sensitive = _b === void 0 ? false : _b;
        var base = {
            getInsideContainer: function () {
                return ReactDOM.findDOMNode(this);
            },
            componentDidMount: function () {
                var _this = this;
                var handle = function (e) {
                    var root = _this.getInsideContainer();
                    if (!root || root.contains(e.target) || root === e.target || (e.button && e.button !== 0))
                        return;
                    e.stopPropagation();
                    _this.onClickOutside(e);
                };
                document.addEventListener('click', handle, sensitive);
                this.__outsideClickableOff = function () {
                    document.removeEventListener('click', handle, sensitive);
                };
            },
            componentWillUnmount: function () {
                this.__outsideClickableOff();
            }
        };
        return function (Ctor) { return applyMixins_1.applyMixins(Ctor, [OutsideClickable, base], { merges: ['componentDidMount', 'componentWillUnmount'] }); };
    };
    return OutsideClickable;
}(React.PureComponent));
exports.OutsideClickable = OutsideClickable;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var classSet_1 = require("../util/classSet");
var REG_LINE = /\r?\n/;
var REG_SPACES = /^ +| {2,}/g; // 行首有一个空格，或者行中有多个空格
var HTML = /** @class */ (function (_super) {
    tslib_1.__extends(HTML, _super);
    function HTML() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HTML.prototype.render = function () {
        var _a = this.props, _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.style, style = _c === void 0 ? {} : _c, simple = _a.simple, children = _a.children, value = _a.value, lineClamp = _a.lineClamp, fromEditor = _a.fromEditor, rest = tslib_1.__rest(_a, ["className", "style", "simple", "children", "value", "lineClamp", "fromEditor"]);
        className = classSet_1.classSet('wHTML', className, { gLineClamp: lineClamp, ck: fromEditor });
        var html = (children != null ? children : value) || '';
        if (lineClamp) {
            style.lineClamp = lineClamp;
            style.WebkitLineClamp = lineClamp;
        }
        if (simple) {
            return React.createElement("span", tslib_1.__assign({ style: style, className: className }, rest, { children: parseSimpleHTML(html) }));
        }
        else {
            return React.createElement("span", tslib_1.__assign({ style: style, className: className, dangerouslySetInnerHTML: { __html: html } }, rest));
        }
    };
    return HTML;
}(React.PureComponent));
exports.HTML = HTML;
function parseSimpleHTML(text) {
    return replaceSimpleHtmlLines(text);
}
exports.parseSimpleHTML = parseSimpleHTML;
function replaceSimpleHtmlLines(html) {
    var elements = [];
    html.split(REG_LINE).forEach(function (t, i) {
        elements.push.apply(elements, replaceSimpleHtmlSpaces(t, i).concat([React.createElement("br", { key: 'br' + i })]));
    });
    elements.pop(); // 去掉最后一个换行
    return elements;
}
function replaceSimpleHtmlSpaces(html, lineNo) {
    var elements = [];
    var index = 0;
    var prefix = 't' + lineNo + '-';
    html.replace(REG_SPACES, function (spaces, i) {
        if (index < i)
            elements.push(React.createElement("span", { key: prefix + i }, html.substring(index, i)));
        elements.push(React.createElement("span", { key: prefix + 's' + i, dangerouslySetInnerHTML: { __html: createHtmlSpaces(spaces.length) } }));
        index = i + spaces.length;
        return '';
    });
    if (index < html.length)
        elements.push(React.createElement("span", { key: prefix + (html.length + 1) }, html.substr(index)));
    return elements;
}
function createHtmlSpaces(size) {
    var arr = [];
    for (var i = 0; i < size; i++) {
        arr.push('&nbsp');
    }
    return arr.join('');
}

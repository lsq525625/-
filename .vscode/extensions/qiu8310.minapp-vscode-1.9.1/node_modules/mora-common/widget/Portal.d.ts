/// <reference types="react" />
import * as React from 'react';
import { KeyboardEvents } from '../component/implements/KeyboardEvents';
import { OutsideClickable } from '../component/implements/OutsideClickable';
import { IModalDOMProps } from './ModalDOM';
export interface IPortalProps {
    children: JSX.Element;
    closeOnPressESC?: boolean;
    closeOnClickMask?: boolean;
    closeOnClickOutside?: boolean;
    isOpen?: boolean;
    trigger?: JSX.Element;
    modal?: boolean | IModalDOMProps;
    onOpen?: (container: Element) => void;
    onClose?: () => void;
    beforeClose?: (container: Element, callback: () => void) => void;
    onUpdate?: () => void;
}
export declare class Portal extends React.PureComponent<IPortalProps, any> implements KeyboardEvents, OutsideClickable {
    static defaultProps: {
        onOpen: () => void;
        onClose: () => void;
        beforeClose: (e: Element, c: () => void) => void;
        onUpdate: () => void;
    };
    container: Element | null;
    state: {
        active: boolean;
    };
    keyboard: {
        esc: () => void;
    };
    open(props?: Readonly<{
        children?: React.ReactNode;
    }> & Readonly<IPortalProps>): void;
    close(isUnmounted?: boolean): void;
    getInsideContainer(): Element | null | undefined;
    onClickOutside(): void;
    renderPortal(props: IPortalProps, isOpening?: boolean): void;
    componentWillReceiveProps(newProps: IPortalProps): void;
    componentWillUnmount(): void;
    render(): React.ReactElement<any> | null;
    private handleWrapperClick(e);
}

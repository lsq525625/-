"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Render_1 = require("./Render");
var Transition_1 = require("./Transition");
var autobind_1 = require("../util/autobind");
require("./style/Confirm.scss");
var emptyFn = function () { };
function confirm(props, instance) {
    var oldOnClose = props.onClose;
    var container = Render_1.getDefaultContainer();
    props.onClose = function () {
        // 同步 remove 会导致 react 报不能调用 setState 的错误（应该是 React 的一个 Bug）
        setTimeout(function () {
            Render_1.removeComponent(container);
            if (oldOnClose)
                oldOnClose();
        }, 0);
    };
    Render_1.renderComponent(React.createElement(Confirm, tslib_1.__assign({}, props)), container, instance);
}
exports.confirm = confirm;
var Confirm = /** @class */ (function (_super) {
    tslib_1.__extends(Confirm, _super);
    function Confirm() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            itemIndex: 0
        };
        // Transition 下的两个组件
        _this.items = [
            null,
            React.createElement("div", null,
                React.createElement("label", { className: 'row title' }, _this.props.title),
                React.createElement("a", { onClick: _this.onOk, className: 'row btn ok' }, _this.props.okText),
                React.createElement("a", { onClick: _this.onCancel, className: 'row btn cancel' }, _this.props.cancelText))
        ];
        return _this;
    }
    Confirm.prototype.componentDidMount = function () {
        this.setState({ itemIndex: 1 });
    };
    Confirm.prototype.onOk = function () {
        this.close('onOk');
    };
    Confirm.prototype.onCancel = function () {
        this.close('onCancel');
    };
    Confirm.prototype.render = function () {
        var itemIndex = this.state.itemIndex;
        return (React.createElement("div", { className: 'wConfirm' },
            React.createElement("div", { className: itemIndex ? 'mask' : '' }),
            React.createElement(Transition_1.Transition, { afterLeave: this.afterClose, name: 'slideUp', className: 'content', items: this.items, itemKey: itemIndex })));
    };
    Confirm.prototype.close = function (fnKey) {
        this.closeFnKey = fnKey;
        this.setState({ itemIndex: 0 });
    };
    Confirm.prototype.afterClose = function () {
        if (this.closeFnKey) {
            var props = this.props;
            props.onClose();
            props[this.closeFnKey]();
            this.closeFnKey = null;
        }
    };
    Confirm.defaultProps = {
        okText: '确认',
        cancelText: '取消',
        onOk: emptyFn,
        onCancel: emptyFn,
        onClose: emptyFn,
    };
    tslib_1.__decorate([
        autobind_1.autobind
    ], Confirm.prototype, "onOk", null);
    tslib_1.__decorate([
        autobind_1.autobind
    ], Confirm.prototype, "onCancel", null);
    tslib_1.__decorate([
        autobind_1.autobind
    ], Confirm.prototype, "afterClose", null);
    return Confirm;
}(React.PureComponent));
exports.Confirm = Confirm;

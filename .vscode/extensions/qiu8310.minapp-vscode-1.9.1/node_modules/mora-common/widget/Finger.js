"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Finger = /** @class */ (function (_super) {
    tslib_1.__extends(Finger, _super);
    function Finger() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.preV = { x: null, y: null };
        _this.preTapPosition = { x: null, y: null };
        _this.pinchStartLen = null;
        _this.scale = 1;
        _this.isDoubleTap = false;
        _this.delta = null;
        _this.last = null;
        _this.now = null;
        _this.x1 = null;
        _this.x2 = null;
        _this.y1 = null;
        _this.y2 = null;
        return _this;
    }
    Finger.prototype.getLen = function (v) {
        return Math.sqrt(v.x * v.x + v.y * v.y);
    };
    Finger.prototype.dot = function (v1, v2) {
        return v1.x * v2.x + v1.y * v2.y;
    };
    Finger.prototype.getAngle = function (v1, v2) {
        var mr = this.getLen(v1) * this.getLen(v2);
        if (mr === 0)
            return 0;
        var r = this.dot(v1, v2) / mr;
        if (r > 1)
            r = 1;
        return Math.acos(r);
    };
    Finger.prototype.cross = function (v1, v2) {
        return v1.x * v2.y - v2.x * v1.y;
    };
    Finger.prototype.getRotateAngle = function (v1, v2) {
        var angle = this.getAngle(v1, v2);
        if (this.cross(v1, v2) > 0) {
            angle *= -1;
        }
        return angle * 180 / Math.PI;
    };
    Finger.prototype._resetState = function () {
        this.setState({ x: null, y: null, swiping: false, start: 0 });
    };
    Finger.prototype._emitEvent = function (name, e) {
        var fn = this.props[name];
        if (fn)
            fn(e);
    };
    Finger.prototype._handleTouchStart = function (evt) {
        var _this = this;
        evt.persist();
        this.now = Date.now();
        this.x1 = evt.touches[0].pageX;
        this.y1 = evt.touches[0].pageY;
        this.delta = this.now - (this.last || this.now);
        if (this.preTapPosition.x !== null && this.preTapPosition.y !== null) {
            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);
        }
        this.preTapPosition.x = this.x1;
        this.preTapPosition.y = this.y1;
        this.last = this.now;
        var preV = this.preV;
        var len = evt.touches.length;
        if (len > 1) {
            var v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };
            preV.x = v.x;
            preV.y = v.y;
            this.pinchStartLen = this.getLen(preV);
            this._emitEvent('onMultipointStart', evt);
        }
        this.longTapTimeout = setTimeout(function () {
            _this._emitEvent('onLongTap', evt);
        }, 750);
    };
    Finger.prototype._handleTouchMove = function (evt) {
        evt.persist();
        var preV = this.preV;
        var len = evt.touches.length;
        var currentX = evt.touches[0].pageX;
        var currentY = evt.touches[0].pageY;
        this.isDoubleTap = false;
        if (len > 1) {
            var v = { x: evt.touches[1].pageX - currentX, y: evt.touches[1].pageY - currentY };
            if (preV.x !== null) {
                if (this.pinchStartLen && this.pinchStartLen > 0) {
                    evt.scale = this.getLen(v) / this.pinchStartLen;
                    this._emitEvent('onPinch', evt);
                }
                evt.angle = this.getRotateAngle(v, preV);
                this._emitEvent('onRotate', evt);
            }
            preV.x = v.x;
            preV.y = v.y;
        }
        else {
            if (this.x2 !== null && this.y2 !== null) {
                evt.deltaX = currentX - this.x2;
                evt.deltaY = currentY - this.y2;
            }
            else {
                evt.deltaX = 0;
                evt.deltaY = 0;
            }
            this._emitEvent('onPressMove', evt);
        }
        this._cancelLongTap();
        this.x2 = currentX;
        this.y2 = currentY;
        if (len > 1) {
            evt.preventDefault();
        }
    };
    Finger.prototype._handleTouchCancel = function () {
        clearInterval(this.tapTimeout);
        clearInterval(this.longTapTimeout);
        clearInterval(this.swipeTimeout);
    };
    Finger.prototype._handleTouchEnd = function (evt) {
        this._cancelLongTap();
        var self = this;
        if (evt.touches.length < 2) {
            this._emitEvent('onMultipointEnd', evt);
        }
        var _a = this, x1 = _a.x1, x2 = _a.x2, y1 = _a.y1, y2 = _a.y2;
        if ((x2 && Math.abs(x1 - x2) > 30) ||
            (y2 && Math.abs(this.preV.y - y2) > 30)) {
            evt.direction = this._swipeDirection(x1, x2, y1, y2);
            this.swipeTimeout = setTimeout(function () {
                self._emitEvent('onSwipe', evt);
            }, 0);
        }
        else {
            this.tapTimeout = setTimeout(function () {
                self._emitEvent('onTap', evt);
                if (self.isDoubleTap) {
                    self._emitEvent('onDoubleTap', evt);
                    self.isDoubleTap = false;
                }
            }, 0);
        }
        this.preV.x = 0;
        this.preV.y = 0;
        this.scale = 1;
        this.pinchStartLen = null;
        this.x1 = this.x2 = this.y1 = this.y2 = null;
    };
    Finger.prototype._cancelLongTap = function () {
        clearTimeout(this.longTapTimeout);
    };
    Finger.prototype._swipeDirection = function (x1, x2, y1, y2) {
        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');
    };
    Finger.prototype.render = function () {
        return React.cloneElement(React.Children.only(this.props.children), {
            onTouchStart: this._handleTouchStart.bind(this),
            onTouchMove: this._handleTouchMove.bind(this),
            onTouchCancel: this._handleTouchCancel.bind(this),
            onTouchEnd: this._handleTouchEnd.bind(this)
        });
    };
    return Finger;
}(React.Component));
exports.Finger = Finger;

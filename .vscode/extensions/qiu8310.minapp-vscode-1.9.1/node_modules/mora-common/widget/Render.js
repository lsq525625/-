"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var ReactDOM = require("react-dom");
var Render = /** @class */ (function (_super) {
    tslib_1.__extends(Render, _super);
    function Render() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.container = _this.props.container || getDefaultContainer(_this.props.className);
        return _this;
    }
    Render.prototype.componentDidMount = function () {
        renderComponent(this.props.children, this.container, this);
    };
    Render.prototype.componentDidUpdate = function () {
        renderComponent(this.props.children, this.container, this);
    };
    Render.prototype.componentWillUnmount = function () {
        removeComponent(this.container);
    };
    Render.prototype.render = function () {
        return null;
    };
    return Render;
}(React.PureComponent));
exports.Render = Render;
function renderComponent(children, container, instance, callback) {
    container = container || getDefaultContainer();
    // https://reactjsnews.com/modals-in-react
    // https://github.com/react-component/util/blob/master/src/getContainerRenderMixin.jsx
    if (instance) {
        // 不同点在于它关联了 instance 组件，跟随 instance 的消失而消失
        return ReactDOM.unstable_renderSubtreeIntoContainer(instance, children, container, callback);
    }
    else {
        return ReactDOM.render(children, container, callback);
    }
}
exports.renderComponent = renderComponent;
function removeComponent(container) {
    if (!container)
        return;
    var result = ReactDOM.unmountComponentAtNode(container);
    if (result && container.parentNode)
        container.parentNode.removeChild(container);
}
exports.removeComponent = removeComponent;
function getDefaultContainer(className, parentNode) {
    var container = document.createElement('div');
    if (className)
        container.className = className;
    parentNode = parentNode || document.body;
    parentNode.appendChild(container);
    return container;
}
exports.getDefaultContainer = getDefaultContainer;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var autobind_1 = require("../util/autobind");
var classSet_1 = require("../util/classSet");
var Finger_1 = require("./Finger");
var react_transition_group_1 = require("react-transition-group");
var Transition_1 = require("./Transition");
require("./style/Slider.scss");
var Slider = /** @class */ (function (_super) {
    tslib_1.__extends(Slider, _super);
    function Slider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isSliding = false;
        _this.state = {
            total: React.Children.toArray(_this.props.children).length,
            reverse: false,
            currentSlide: _this.props.start
        };
        return _this;
    }
    Slider.prototype.slideTo = function (index, reverse) {
        if (reverse === void 0) { reverse = null; }
        var last = this.state.total - 1;
        var prevSlide = this.state.currentSlide;
        index = index < 0 ? 0 : index > last ? last : index;
        if (index === prevSlide || this.isSliding)
            return;
        this.setState({ currentSlide: index, reverse: reverse == null ? prevSlide > index : reverse });
    };
    Slider.prototype.nextSlide = function () {
        var _a = this.state, total = _a.total, currentSlide = _a.currentSlide;
        if (currentSlide === total - 1 && !this.props.loop)
            return;
        this.slideTo((currentSlide + 1) % total, false);
    };
    Slider.prototype.prevSlide = function () {
        var _a = this.state, total = _a.total, currentSlide = _a.currentSlide;
        if (currentSlide === 0 && !this.props.loop)
            return;
        this.slideTo((currentSlide + total - 1) % total, true);
    };
    Object.defineProperty(Slider.prototype, "slideStyle", {
        get: function () {
            var _a = document.documentElement, height = _a.clientHeight, width = _a.clientWidth;
            return { height: height, width: width, display: 'block' };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "child", {
        get: function () {
            var _a = this.props, children = _a.children, animation = _a.animation;
            var slideStyle = this.slideStyle;
            var child = React.Children.toArray(children)[this.state.currentSlide];
            return (React.createElement(Transition_1.TransitionGroupItem, { key: child.key || this.state.currentSlide, name: animation, beforeEnter: this.beforeChildEnter, afterEnter: this.afterChildEnter, beforeLeave: this.beforeChildLeave, className: 'wSliderSlide', style: slideStyle }, child));
        },
        enumerable: true,
        configurable: true
    });
    Slider.prototype.render = function () {
        var _this = this;
        var _a = this.props, direction = _a.direction, className = _a.className, style = _a.style;
        var _b = this.state, reverse = _b.reverse, total = _b.total;
        var cls = reverse ? 'wSliderReverse ' + direction + 'Reverse' : 'wSliderNormal ' + direction;
        return (React.createElement(Finger_1.Finger, { onSwipe: this.onSwipe },
            React.createElement("div", { ref: function (s) { return _this.slider = s; }, style: style, className: className }, total === 0 ? null : (React.createElement(react_transition_group_1.TransitionGroup, { component: 'div', className: classSet_1.classSet('wSlider', cls), onTouchStart: this.onTouchStart }, this.child)))));
    };
    Slider.prototype.beforeChildEnter = function (el) {
        this.isSliding = true;
        el.classList.add('current');
        if (this.props.beforeChange)
            this.props.beforeChange(this.state.currentSlide - 1);
    };
    Slider.prototype.afterChildEnter = function (el) {
        this.isSliding = false;
        if (this.props.afterChange)
            this.props.afterChange(this.state.currentSlide);
    };
    Slider.prototype.beforeChildLeave = function (el) {
        el.classList.remove('current');
    };
    Slider.prototype.onTouchStart = function () {
        if (!this.slider)
            return;
        var container = this.slider.children[0].children[0];
        var containerHeight = container.clientHeight, containerWidth = container.clientWidth, scrollTop = container.scrollTop, scrollLeft = container.scrollLeft;
        var _a = container.children[0], childHeight = _a.clientHeight, childWidth = _a.clientWidth;
        var _b = this.props, offset = _b.offset, direction = _b.direction;
        switch (direction) {
            case 'vertical':
                this.canSlideNext = containerHeight + scrollTop + offset - childHeight >= 0;
                this.canSlidePrev = scrollTop - offset <= 0;
                break;
            case 'horizontal':
                this.canSlideNext = containerWidth + scrollLeft + offset - childWidth >= 0;
                this.canSlidePrev = scrollLeft - offset <= 0;
                break;
        }
    };
    Slider.prototype.onSwipe = function (e) {
        var swipe = e.direction.toLowerCase();
        if (this.props.direction === 'vertical') {
            if (swipe === 'up' && this.canSlideNext) {
                this.nextSlide();
            }
            else if (swipe === 'down' && this.canSlidePrev) {
                this.prevSlide();
            }
        }
        else {
            if (swipe === 'left' && this.canSlideNext) {
                this.nextSlide();
            }
            else if (swipe === 'right' && this.canSlidePrev) {
                this.prevSlide();
            }
        }
    };
    Slider.defaultProps = {
        loop: false,
        start: 0,
        direction: 'vertical',
        animation: 'move',
        offset: 20
    };
    tslib_1.__decorate([
        autobind_1.autobind
    ], Slider.prototype, "beforeChildEnter", null);
    tslib_1.__decorate([
        autobind_1.autobind
    ], Slider.prototype, "afterChildEnter", null);
    tslib_1.__decorate([
        autobind_1.autobind
    ], Slider.prototype, "beforeChildLeave", null);
    tslib_1.__decorate([
        autobind_1.autobind
    ], Slider.prototype, "onTouchStart", null);
    tslib_1.__decorate([
        autobind_1.autobind
    ], Slider.prototype, "onSwipe", null);
    return Slider;
}(React.PureComponent));
exports.Slider = Slider;

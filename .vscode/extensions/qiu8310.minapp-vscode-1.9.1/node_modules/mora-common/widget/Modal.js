"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* tslint:disable:member-ordering */
// 可以参考  https://github.com/tajo/react-portal 项目
var React = require("react");
var Render_1 = require("../widget/Render");
var ModalDOM_1 = require("./ModalDOM");
var once_1 = require("../util/once");
var emptyFn = function () { };
/*
  需要这样使用

  this.state.isModalVisiable
    ? <Modal closeOnClickMask closeModal={() => this.setState({isModalVisiable: false})}>...</Modal>
    : null

 */
var Modal = /** @class */ (function (_super) {
    tslib_1.__extends(Modal, _super);
    function Modal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.container = _this.props.container || Render_1.getDefaultContainer();
        return _this;
    }
    Modal.dialog = function (props, component, instance) {
        var container = props.container || Render_1.getDefaultContainer();
        var closeModal = function () { return Render_1.removeComponent(container); };
        rc(tslib_1.__assign({}, props, { closeModal: closeModal, children: React.cloneElement(component) }), container, instance);
        return { destroy: once_1.once(closeModal) };
    };
    Modal.render = function (context, stateKey, Component, props, compProps) {
        if (props === void 0) { props = {}; }
        if (compProps === void 0) { compProps = {}; }
        var closeModal = function () {
            return context.setState((_a = {}, _a[stateKey] = false, _a));
            var _a;
        };
        return context.state[stateKey]
            ? React.createElement(Modal, tslib_1.__assign({}, props, { closeModal: closeModal }),
                React.createElement(Component, tslib_1.__assign({ data: context.state[stateKey] }, compProps, { closeModal: closeModal })))
            : null;
    };
    Modal.prototype.renderModal = function () {
        rc(this.props, this.container, this);
    };
    Modal.prototype.componentDidMount = function () {
        this.renderModal();
    };
    Modal.prototype.componentDidUpdate = function () {
        this.renderModal();
    };
    Modal.prototype.componentWillUnmount = function () {
        Render_1.removeComponent(this.container);
    };
    Modal.prototype.render = function () {
        return null;
    };
    Modal.defaultProps = {
        closeModal: emptyFn
    };
    return Modal;
}(React.PureComponent));
exports.Modal = Modal;
function rc(props, container, instance) {
    var closeOnPressESC = props.closeOnPressESC, closeOnClickMask = props.closeOnClickMask, closeOnClickOutside = props.closeOnClickOutside, closeModal = props.closeModal, nowrap = props.nowrap, 
    /* 这个 container 已经无用了 */ _ = props.container, rest = tslib_1.__rest(props, ["closeOnPressESC", "closeOnClickMask", "closeOnClickOutside", "closeModal", "nowrap", "container"]);
    var child;
    if (nowrap) {
        child = props.children;
        if (!child || !child.type)
            child = React.createElement("div", null, child); // ReactNode 还包括 string 和 boolean
    }
    Render_1.renderComponent(nowrap && child
        ? child
        : (React.createElement(ModalDOM_1.ModalDOM, tslib_1.__assign({}, rest, { onPressESC: closeOnPressESC ? closeModal : emptyFn, onClickMask: closeOnClickMask ? closeModal : emptyFn, onClickOutside: closeOnClickOutside ? closeModal : emptyFn }))), container, instance);
}

/// <reference types="react" />
/// <reference types="node" />
import * as React from 'react';
import { Point } from '../type/Object';
export interface IFingerProps {
    onTouchCancel?: (e: any) => void;
    onMultipointStart?: (e: any) => void;
    onMultipointEnd?: (e: any) => void;
    onTap?: (e: any) => void;
    onDoubleTap?: (e: any) => void;
    onLongTap?: (e: any) => void;
    onSingleTap?: (e: any) => void;
    onRotate?: (e: any) => void;
    onPinch?: (e: any) => void;
    onPressMove?: (e: any) => void;
    onSwipe?: (e: any) => void;
}
export declare class Finger extends React.Component<IFingerProps, any> {
    tapTimeout: NodeJS.Timer;
    longTapTimeout: NodeJS.Timer;
    swipeTimeout: NodeJS.Timer;
    preV: {
        x: number | null;
        y: number | null;
    };
    preTapPosition: {
        x: number | null;
        y: number | null;
    };
    pinchStartLen: number | null;
    scale: number;
    isDoubleTap: boolean;
    delta: number | null;
    last: number | null;
    now: number | null;
    x1: number | null;
    x2: number | null;
    y1: number | null;
    y2: number | null;
    getLen(v: Point): number;
    dot(v1: Point, v2: Point): number;
    getAngle(v1: Point, v2: Point): number;
    cross(v1: Point, v2: Point): number;
    getRotateAngle(v1: Point, v2: Point): number;
    _resetState(): void;
    _emitEvent(name: string, e: any): void;
    _handleTouchStart(evt: React.TouchEvent<any>): void;
    _handleTouchMove(evt: any): void;
    _handleTouchCancel(): void;
    _handleTouchEnd(evt: any): void;
    _cancelLongTap(): void;
    _swipeDirection(x1: number, x2: number, y1: number, y2: number): "Left" | "Right" | "Up" | "Down";
    render(): React.ReactElement<any>;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Scrollable_1 = require("../component/implements/Scrollable");
var Storable_1 = require("../component/implements/Storable");
var onview_1 = require("../dom/onview");
var warn_1 = require("../util/warn");
var ScrollPosition = /** @class */ (function (_super) {
    tslib_1.__extends(ScrollPosition, _super);
    function ScrollPosition() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.scrolled = false;
        return _this;
    }
    ScrollPosition.prototype.getContainer = function () {
        var container = this.props.container;
        return container === undefined
            ? document.documentElement
            : typeof container === 'function'
                ? container()
                : container;
    };
    ScrollPosition.prototype.componentDidMount = function () {
        if (!this.scrolled && this.props.scroll) {
            this.scroll();
            this.scrolled = true;
        }
    };
    ScrollPosition.prototype.componentDidUpdate = function () {
        this.componentDidMount();
    };
    ScrollPosition.prototype.render = function () {
        return this.props.children;
    };
    return ScrollPosition;
}(React.Component));
exports.ScrollPosition = ScrollPosition;
var ScrollRestore = /** @class */ (function (_super) {
    tslib_1.__extends(ScrollRestore, _super);
    function ScrollRestore() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.unmount = false;
        return _this;
    }
    ScrollRestore.prototype.getScrollableContainer = function () {
        return this.getContainer();
    };
    ScrollRestore.prototype.componentWillMount = function () {
        // 保存上次的值，因为新进入一个页面，可能会触发 scroll，引起值被覆盖了
        // 等到页面加载完，需要 scroll 时就可以使用此时保存的值
        this.lastScrollTop = this.store(this.props.id) || 0;
    };
    ScrollRestore.prototype.componentDidMount = function () {
        var _this = this;
        _super.prototype.componentDidMount.call(this);
        var container = this.getScrollableContainer();
        if (!container) {
            warn_1.warn('ScrollRestore： 指定的 container 不存在，默认只会监听 window 的滚动');
        }
        this.offview = onview_1.onview(function (e) {
            if (!_this.unmount) {
                _this.store(_this.props.id, _this.scrollTop);
            }
        }, { events: ['scroll'], container: container, throttle: 200 });
    };
    ScrollRestore.prototype.componentWillUnmount = function () {
        this.unmount = true;
        this.offview();
    };
    ScrollRestore.prototype.scroll = function () {
        this.scrollTop = this.lastScrollTop;
    };
    ScrollRestore.defaultProps = {
        scroll: true,
        storeKey: 'ScrollRestore',
        store: window
    };
    ScrollRestore = tslib_1.__decorate([
        Scrollable_1.Scrollable.apply(),
        Storable_1.Storable.apply()
    ], ScrollRestore);
    return ScrollRestore;
}(ScrollPosition));
exports.ScrollRestore = ScrollRestore;
var ScrollToTop = /** @class */ (function (_super) {
    tslib_1.__extends(ScrollToTop, _super);
    function ScrollToTop() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScrollToTop.prototype.getScrollableContainer = function () {
        return this.getContainer();
    };
    ScrollToTop.prototype.scroll = function () {
        this.scrollTop = 0;
    };
    ScrollToTop.defaultProps = {
        scroll: true
    };
    ScrollToTop = tslib_1.__decorate([
        Scrollable_1.Scrollable.apply()
    ], ScrollToTop);
    return ScrollToTop;
}(ScrollPosition));
exports.ScrollToTop = ScrollToTop;

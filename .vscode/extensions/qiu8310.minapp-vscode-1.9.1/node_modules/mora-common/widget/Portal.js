"use strict";
// 根据  https://github.com/tajo/react-portal 项目改编
// react 16 自带 ReactDOM.renderPortal 方法了
// 此项目逻辑比较复杂，建议使用 Modal 项目
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Render_1 = require("../widget/Render");
var KeyboardEvents_1 = require("../component/implements/KeyboardEvents");
var OutsideClickable_1 = require("../component/implements/OutsideClickable");
var autobind_1 = require("../util/autobind");
var ModalDOM_1 = require("./ModalDOM");
/*
  // 通过 isOpen 控制 显示/隐藏
  <button onClick={this.setState({openPortal: true})}>Open</button>
  <Portal isOpen={this.state.openPortal}>
    <div>...</div>
  </Portal>

  // 通过子组件自己控制 显示/隐藏
  <Portal triggle={<button>Open</button>}>
    <Child />
  </Portal>

  function Child(props) {
    return <button onClick={props.closePortal}>close</button>
  }
 */
var Portal = /** @class */ (function (_super) {
    tslib_1.__extends(Portal, _super);
    function Portal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            active: false
        };
        _this.keyboard = {
            esc: function () { if (_this.state.active && _this.props.closeOnPressESC)
                _this.close(); }
        };
        return _this;
    }
    Portal.prototype.open = function (props) {
        if (props === void 0) { props = this.props; }
        this.setState({ active: true });
        this.renderPortal(props, true);
    };
    Portal.prototype.close = function (isUnmounted) {
        var _this = this;
        if (isUnmounted === void 0) { isUnmounted = false; }
        if (!this.state.active)
            return;
        var props = this.props;
        props.beforeClose(this.container, function () {
            if (_this.container)
                Render_1.removeComponent(_this.container);
            _this.container = null;
            if (isUnmounted !== true)
                _this.setState({ active: false });
            props.onClose();
        });
    };
    Portal.prototype.getInsideContainer = function () {
        if (!this.state.active || !this.props.closeOnClickOutside)
            return;
        return this.container;
    };
    Portal.prototype.onClickOutside = function () {
        if (this.state.active)
            this.close();
    };
    Portal.prototype.renderPortal = function (props, isOpening) {
        if (isOpening === void 0) { isOpening = false; }
        var children = props.children, onOpen = props.onOpen, onUpdate = props.onUpdate, modal = props.modal, closeOnClickMask = props.closeOnClickMask;
        var container = this.container;
        if (!container)
            this.container = container = Render_1.getDefaultContainer();
        if (isOpening && onOpen)
            onOpen(container);
        if (typeof children.type === 'function') {
            children = React.cloneElement(children, {
                closePortal: this.close
            });
        }
        if (modal) {
            var modalProps = modal === true ? {} : modal;
            var close_1 = this.close;
            children = React.createElement(ModalDOM_1.ModalDOM, tslib_1.__assign({}, modalProps, { children: children, onClickMask: closeOnClickMask ? close_1 : null }));
        }
        Render_1.renderComponent(children, container, this, onUpdate);
    };
    Portal.prototype.componentWillReceiveProps = function (newProps) {
        var active = this.state.active;
        var isOpen = newProps.isOpen;
        if (isOpen != null) {
            if (isOpen) {
                if (active) {
                    this.renderPortal(newProps);
                }
                else {
                    this.open(newProps);
                }
            }
            else if (active) {
                this.close();
            }
        }
        else if (active) {
            this.renderPortal(newProps);
        }
    };
    Portal.prototype.componentWillUnmount = function () {
        this.close(true);
    };
    Portal.prototype.render = function () {
        if (this.props.trigger) {
            return React.cloneElement(this.props.trigger, {
                onClick: this.handleWrapperClick
            });
        }
        return null;
    };
    Portal.prototype.handleWrapperClick = function (e) {
        e.preventDefault();
        e.stopPropagation();
        if (!this.state.active) {
            this.open();
        }
    };
    Portal.defaultProps = {
        onOpen: function () { },
        onClose: function () { },
        beforeClose: function (e, c) { return c(); },
        onUpdate: function () { }
    };
    tslib_1.__decorate([
        autobind_1.autobind
    ], Portal.prototype, "open", null);
    tslib_1.__decorate([
        autobind_1.autobind
    ], Portal.prototype, "close", null);
    tslib_1.__decorate([
        autobind_1.autobind
    ], Portal.prototype, "handleWrapperClick", null);
    Portal = tslib_1.__decorate([
        KeyboardEvents_1.KeyboardEvents.apply(),
        OutsideClickable_1.OutsideClickable.apply({ sensitive: true })
    ], Portal);
    return Portal;
}(React.PureComponent));
exports.Portal = Portal;

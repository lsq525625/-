/// <reference types="react" />
import * as React from 'react';
export declare type IImageContainer = () => Element;
export declare type IImageRatio = (devicePixelRatio: number) => string;
export interface IImageProps extends React.HTMLProps<HTMLImageElement | HTMLDivElement> {
    enableIntersectionObserver?: boolean;
    src: string;
    /** 是否需要圆角，或指定圆角的大小 */
    rounded?: string | number | boolean;
    /** 指定正方形的边长，类似于同时指定了 width 和 height */
    square?: string | number;
    /** 启用 lazyload */
    lazyload?: boolean;
    fade?: boolean | number;
    offset?: number;
    /** 如果启用 lazyload，可以指定一个源图片未加载前的一个小图片 */
    placeholdSrc?: 'black' | 'white' | string;
    error?: (e: ErrorEvent) => void;
    errorClass?: string;
    successClass?: string;
    loadingClass?: string;
    container?: Element | IImageContainer;
    noCacheContainer?: boolean;
    /** 启用 retina 适配，当前图片的 pixel ratio，如果是函数，则返回一个加在 src 后的字符串，默认是 `dpr=[devicePixelRatio]:[ratio] */
    ratio?: number | IImageRatio;
    /** 启用 background，即不使用 img 标签，而是使用指定的 component  */
    bg?: boolean;
    /** 只有在 background 为 true 是，设置 component 才有效，默认是 div */
    component?: React.ComponentClass<any> | string;
}
export declare class Image extends React.PureComponent<IImageProps, any> {
    static defaultProps: {
        lazyload: boolean;
        fade: boolean;
        offset: number;
        placeholdSrc: string;
        errorClass: string;
        successClass: string;
        loadingClass: string;
        component: string;
    };
    loaded: boolean;
    destroied: boolean;
    el: HTMLDivElement | HTMLImageElement;
    private offBind;
    private cachedContainer;
    getContainer(): Element | undefined;
    getLazyloadSrc(): string;
    getRealSrc(): string;
    load(): void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: IImageProps): void;
    destroy(): void;
    componentWillUnmount(): void;
    render(): React.DetailedReactHTMLElement<{
        readonly children?: React.ReactNode;
        readonly accept?: string | undefined;
        readonly acceptCharset?: string | undefined;
        readonly action?: string | undefined;
        readonly allowFullScreen?: boolean | undefined;
        readonly allowTransparency?: boolean | undefined;
        readonly alt?: string | undefined;
        readonly as?: string | undefined;
        readonly async?: boolean | undefined;
        readonly autoComplete?: string | undefined;
        readonly autoFocus?: boolean | undefined;
        readonly autoPlay?: boolean | undefined;
        readonly capture?: boolean | undefined;
        readonly cellPadding?: string | number | undefined;
        readonly cellSpacing?: string | number | undefined;
        readonly charSet?: string | undefined;
        readonly challenge?: string | undefined;
        readonly checked?: boolean | undefined;
        readonly cite?: string | undefined;
        readonly classID?: string | undefined;
        readonly cols?: number | undefined;
        readonly colSpan?: number | undefined;
        readonly content?: string | undefined;
        readonly controls?: boolean | undefined;
        readonly coords?: string | undefined;
        readonly crossOrigin?: string | undefined;
        readonly data?: string | undefined;
        readonly dateTime?: string | undefined;
        readonly default?: boolean | undefined;
        readonly defer?: boolean | undefined;
        readonly disabled?: boolean | undefined;
        readonly download?: any;
        readonly encType?: string | undefined;
        readonly form?: string | undefined;
        readonly formAction?: string | undefined;
        readonly formEncType?: string | undefined;
        readonly formMethod?: string | undefined;
        readonly formNoValidate?: boolean | undefined;
        readonly formTarget?: string | undefined;
        readonly frameBorder?: string | number | undefined;
        readonly headers?: string | undefined;
        readonly high?: number | undefined;
        readonly href?: string | undefined;
        readonly hrefLang?: string | undefined;
        readonly htmlFor?: string | undefined;
        readonly httpEquiv?: string | undefined;
        readonly integrity?: string | undefined;
        readonly keyParams?: string | undefined;
        readonly keyType?: string | undefined;
        readonly kind?: string | undefined;
        readonly label?: string | undefined;
        readonly list?: string | undefined;
        readonly loop?: boolean | undefined;
        readonly low?: number | undefined;
        readonly manifest?: string | undefined;
        readonly marginHeight?: number | undefined;
        readonly marginWidth?: number | undefined;
        readonly max?: string | number | undefined;
        readonly maxLength?: number | undefined;
        readonly media?: string | undefined;
        readonly mediaGroup?: string | undefined;
        readonly method?: string | undefined;
        readonly min?: string | number | undefined;
        readonly minLength?: number | undefined;
        readonly multiple?: boolean | undefined;
        readonly muted?: boolean | undefined;
        readonly name?: string | undefined;
        readonly nonce?: string | undefined;
        readonly noValidate?: boolean | undefined;
        readonly open?: boolean | undefined;
        readonly optimum?: number | undefined;
        readonly pattern?: string | undefined;
        readonly placeholder?: string | undefined;
        readonly playsInline?: boolean | undefined;
        readonly poster?: string | undefined;
        readonly preload?: string | undefined;
        readonly readOnly?: boolean | undefined;
        readonly rel?: string | undefined;
        readonly required?: boolean | undefined;
        readonly reversed?: boolean | undefined;
        readonly rows?: number | undefined;
        readonly rowSpan?: number | undefined;
        readonly sandbox?: string | undefined;
        readonly scope?: string | undefined;
        readonly scoped?: boolean | undefined;
        readonly scrolling?: string | undefined;
        readonly seamless?: boolean | undefined;
        readonly selected?: boolean | undefined;
        readonly shape?: string | undefined;
        readonly size?: number | undefined;
        readonly sizes?: string | undefined;
        readonly span?: number | undefined;
        readonly srcDoc?: string | undefined;
        readonly srcLang?: string | undefined;
        readonly srcSet?: string | undefined;
        readonly start?: number | undefined;
        readonly step?: string | number | undefined;
        readonly summary?: string | undefined;
        readonly target?: string | undefined;
        readonly type?: string | undefined;
        readonly useMap?: string | undefined;
        readonly value?: string | number | string[] | undefined;
        readonly wmode?: string | undefined;
        readonly wrap?: string | undefined;
        readonly defaultChecked?: boolean | undefined;
        readonly defaultValue?: string | string[] | undefined;
        readonly suppressContentEditableWarning?: boolean | undefined;
        readonly accessKey?: string | undefined;
        readonly contentEditable?: boolean | undefined;
        readonly contextMenu?: string | undefined;
        readonly dir?: string | undefined;
        readonly draggable?: boolean | undefined;
        readonly hidden?: boolean | undefined;
        readonly id?: string | undefined;
        readonly lang?: string | undefined;
        readonly slot?: string | undefined;
        readonly spellCheck?: boolean | undefined;
        readonly tabIndex?: number | undefined;
        readonly title?: string | undefined;
        readonly inputMode?: string | undefined;
        readonly is?: string | undefined;
        readonly radioGroup?: string | undefined;
        readonly role?: string | undefined;
        readonly about?: string | undefined;
        readonly datatype?: string | undefined;
        readonly inlist?: any;
        readonly prefix?: string | undefined;
        readonly property?: string | undefined;
        readonly resource?: string | undefined;
        readonly typeof?: string | undefined;
        readonly vocab?: string | undefined;
        readonly autoCapitalize?: string | undefined;
        readonly autoCorrect?: string | undefined;
        readonly autoSave?: string | undefined;
        readonly color?: string | undefined;
        readonly itemProp?: string | undefined;
        readonly itemScope?: boolean | undefined;
        readonly itemType?: string | undefined;
        readonly itemID?: string | undefined;
        readonly itemRef?: string | undefined;
        readonly results?: number | undefined;
        readonly security?: string | undefined;
        readonly unselectable?: boolean | undefined;
        readonly 'aria-activedescendant'?: string | undefined;
        readonly 'aria-atomic'?: boolean | "false" | "true" | undefined;
        readonly 'aria-autocomplete'?: "none" | "inline" | "list" | "both" | undefined;
        readonly 'aria-busy'?: boolean | "false" | "true" | undefined;
        readonly 'aria-checked'?: boolean | "false" | "true" | "mixed" | undefined;
        readonly 'aria-colcount'?: number | undefined;
        readonly 'aria-colindex'?: number | undefined;
        readonly 'aria-colspan'?: number | undefined;
        readonly 'aria-current'?: boolean | "time" | "false" | "true" | "page" | "step" | "location" | "date" | undefined;
        readonly 'aria-describedby'?: string | undefined;
        readonly 'aria-details'?: string | undefined;
        readonly 'aria-disabled'?: boolean | "false" | "true" | undefined;
        readonly 'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        readonly 'aria-errormessage'?: string | undefined;
        readonly 'aria-expanded'?: boolean | "false" | "true" | undefined;
        readonly 'aria-flowto'?: string | undefined;
        readonly 'aria-grabbed'?: boolean | "false" | "true" | undefined;
        readonly 'aria-haspopup'?: boolean | "menu" | "false" | "true" | "listbox" | "tree" | "grid" | "dialog" | undefined;
        readonly 'aria-hidden'?: boolean | "false" | "true" | undefined;
        readonly 'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        readonly 'aria-keyshortcuts'?: string | undefined;
        readonly 'aria-label'?: string | undefined;
        readonly 'aria-labelledby'?: string | undefined;
        readonly 'aria-level'?: number | undefined;
        readonly 'aria-live'?: "off" | "assertive" | "polite" | undefined;
        readonly 'aria-modal'?: boolean | "false" | "true" | undefined;
        readonly 'aria-multiline'?: boolean | "false" | "true" | undefined;
        readonly 'aria-multiselectable'?: boolean | "false" | "true" | undefined;
        readonly 'aria-orientation'?: "horizontal" | "vertical" | undefined;
        readonly 'aria-owns'?: string | undefined;
        readonly 'aria-placeholder'?: string | undefined;
        readonly 'aria-posinset'?: number | undefined;
        readonly 'aria-pressed'?: boolean | "false" | "true" | "mixed" | undefined;
        readonly 'aria-readonly'?: boolean | "false" | "true" | undefined;
        readonly 'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals" | undefined;
        readonly 'aria-required'?: boolean | "false" | "true" | undefined;
        readonly 'aria-roledescription'?: string | undefined;
        readonly 'aria-rowcount'?: number | undefined;
        readonly 'aria-rowindex'?: number | undefined;
        readonly 'aria-rowspan'?: number | undefined;
        readonly 'aria-selected'?: boolean | "false" | "true" | undefined;
        readonly 'aria-setsize'?: number | undefined;
        readonly 'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        readonly 'aria-valuemax'?: number | undefined;
        readonly 'aria-valuemin'?: number | undefined;
        readonly 'aria-valuenow'?: number | undefined;
        readonly 'aria-valuetext'?: string | undefined;
        readonly dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        readonly onCopy?: ((event: React.ClipboardEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCopyCapture?: ((event: React.ClipboardEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCut?: ((event: React.ClipboardEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCutCapture?: ((event: React.ClipboardEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onPaste?: ((event: React.ClipboardEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onPasteCapture?: ((event: React.ClipboardEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCompositionEnd?: ((event: React.CompositionEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCompositionStart?: ((event: React.CompositionEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCompositionUpdate?: ((event: React.CompositionEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onFocus?: ((event: React.FocusEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onFocusCapture?: ((event: React.FocusEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onBlur?: ((event: React.FocusEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onBlurCapture?: ((event: React.FocusEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onChange?: ((event: React.FormEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onChangeCapture?: ((event: React.FormEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onInput?: ((event: React.FormEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onInputCapture?: ((event: React.FormEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onReset?: ((event: React.FormEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onResetCapture?: ((event: React.FormEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onSubmit?: ((event: React.FormEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onSubmitCapture?: ((event: React.FormEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onInvalid?: ((event: React.FormEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onInvalidCapture?: ((event: React.FormEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onLoad?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onLoadCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onError?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onErrorCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onKeyDown?: ((event: React.KeyboardEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onKeyPress?: ((event: React.KeyboardEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onKeyUp?: ((event: React.KeyboardEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onAbort?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onAbortCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCanPlay?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDurationChange?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onEmptied?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onEncrypted?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onEnded?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onEndedCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onLoadedData?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onLoadStart?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onPause?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onPauseCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onPlay?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onPlayCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onPlaying?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onPlayingCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onProgress?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onProgressCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onRateChange?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onSeeked?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onSeekedCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onSeeking?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onSeekingCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onStalled?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onStalledCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onSuspend?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onSuspendCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onTimeUpdate?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onVolumeChange?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onWaiting?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onWaitingCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onClick?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onClickCapture?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onContextMenu?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onContextMenuCapture?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDoubleClick?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDoubleClickCapture?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDrag?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragCapture?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragEnd?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragEndCapture?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragEnter?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragEnterCapture?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragExit?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragExitCapture?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragLeave?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragLeaveCapture?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragOver?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragOverCapture?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragStart?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDragStartCapture?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDrop?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onDropCapture?: ((event: React.DragEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onMouseDown?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onMouseDownCapture?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onMouseEnter?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onMouseLeave?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onMouseMove?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onMouseMoveCapture?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onMouseOut?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onMouseOutCapture?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onMouseOver?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onMouseOverCapture?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onMouseUp?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onMouseUpCapture?: ((event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onSelect?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onSelectCapture?: ((event: React.SyntheticEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onTouchCancel?: ((event: React.TouchEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onTouchCancelCapture?: ((event: React.TouchEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onTouchEnd?: ((event: React.TouchEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onTouchEndCapture?: ((event: React.TouchEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onTouchMove?: ((event: React.TouchEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onTouchMoveCapture?: ((event: React.TouchEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onTouchStart?: ((event: React.TouchEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onTouchStartCapture?: ((event: React.TouchEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onScroll?: ((event: React.UIEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onScrollCapture?: ((event: React.UIEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onWheel?: ((event: React.WheelEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onWheelCapture?: ((event: React.WheelEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onAnimationStart?: ((event: React.AnimationEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onAnimationEnd?: ((event: React.AnimationEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onAnimationIteration?: ((event: React.AnimationEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onTransitionEnd?: ((event: React.TransitionEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLImageElement | HTMLDivElement>) => void) | undefined;
        readonly ref?: string | ((instance: HTMLImageElement | HTMLDivElement | null) => any) | undefined;
        readonly key?: string | number | undefined;
    }, HTMLImageElement | HTMLDivElement>;
}

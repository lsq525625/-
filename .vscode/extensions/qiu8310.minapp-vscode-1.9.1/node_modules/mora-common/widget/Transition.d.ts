/// <reference types="react" />
import * as React from 'react';
import * as TransitionGroup from 'react-transition-group/TransitionGroup';
import { IReactComponentRenderResult } from '../type/React';
export interface ITransitionGroupItemProps {
    name: string;
    component?: string;
    componentProps?: any;
    className?: string;
    style?: React.CSSProperties;
    appear?: boolean;
    appearSuffix?: string;
    appearActiveSuffix?: string;
    beforeAppear?: (el: HTMLElement) => any;
    onAppear?: (el: HTMLElement) => any;
    afterAppear?: (el: HTMLElement) => any;
    enter?: boolean;
    enterSuffix?: string;
    enterActiveSuffix?: string;
    beforeEnter?: (el: HTMLElement) => any;
    onEnter?: (el: HTMLElement) => any;
    afterEnter?: (el: HTMLElement) => any;
    leave?: boolean;
    leaveSuffix?: string;
    leaveActiveSuffix?: string;
    beforeLeave?: (el: HTMLElement) => any;
    onLeave?: (el: HTMLElement) => any;
    afterLeave?: (el: HTMLElement) => any;
}
export { TransitionGroup };
export declare class TransitionGroupItem extends React.PureComponent<ITransitionGroupItemProps, any> {
    static defaultProps: {
        component: string;
        componentProps: {};
        appear: boolean;
        appearSuffix: string;
        appearActiveSuffix: string;
        enter: boolean;
        enterSuffix: string;
        enterActiveSuffix: string;
        leave: boolean;
        leaveSuffix: string;
        leaveActiveSuffix: string;
    };
    private el;
    reflow(el: HTMLElement): void;
    call(location: string, type: string): void;
    will(type: string, callback: () => void): void;
    did(type: string): void;
    componentWillAppear(callback: () => void): void;
    componentDidAppear(): void;
    componentWillEnter(callback: () => void): void;
    componentDidEnter(): void;
    componentWillLeave(callback: () => void): void;
    componentDidLeave(): void;
    render(): React.DOMElement<any, Element>;
}
export interface ITransition extends ITransitionGroupItemProps {
    itemKey?: string | number;
    /** 切换到只显示单个 item 的模式, itemKey 则应该是 items 的当前显示的 item 的索引；提供了此字段便不需要 children */
    items?: IReactComponentRenderResult[];
    groupProps?: TransitionGroup.TransitionGroupProps;
}
export declare class Transition extends React.PureComponent<ITransition, any> {
    static defaultProps: {
        groupProps: {
            component: string;
        };
    };
    render(): any;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Transition_1 = require("../widget/Transition");
var classSet_1 = require("../util/classSet");
var OutsideClickable_1 = require("../component/implements/OutsideClickable");
var KeyboardEvents_1 = require("../component/implements/KeyboardEvents");
var style_1 = require("../dom/style");
require("./style/ModalDOM.scss");
var ModalDOM = /** @class */ (function (_super) {
    tslib_1.__extends(ModalDOM, _super);
    function ModalDOM() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.keyboard = {
            esc: function (e) {
                var onPressESC = _this.props.onPressESC;
                if (onPressESC)
                    onPressESC(e);
            }
        };
        return _this;
    }
    ModalDOM.prototype.onClickOutside = function (e) {
        var onClickOutside = this.props.onClickOutside;
        if (onClickOutside)
            onClickOutside(e);
    };
    Object.defineProperty(ModalDOM.prototype, "mask", {
        get: function () {
            var _a = this.props, nomask = _a.nomask, onClickMask = _a.onClickMask, maskTransparent = _a.maskTransparent, maskClickThrough = _a.maskClickThrough;
            if (nomask)
                return null;
            return React.createElement("div", { onClick: onClickMask, className: classSet_1.classSet('modalMask gOverlay', maskClickThrough ? 'gClickThrough' : 'gClickable'), style: maskTransparent ? { background: 'transparent' } : {} });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalDOM.prototype, "content", {
        get: function () {
            var _a = this.props, width = _a.width, height = _a.height, minWidth = _a.minWidth, maxWidth = _a.maxWidth, minHeight = _a.minHeight, maxHeight = _a.maxHeight, children = _a.children;
            return (React.createElement("div", { className: 'modalContentWrap gOverlay gHVCenterChildren' },
                React.createElement("div", { style: { width: width, height: height, minWidth: minWidth, maxWidth: maxWidth, minHeight: minHeight, maxHeight: maxHeight }, className: 'modalContent gClickable' }, children)));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalDOM.prototype, "animateContent", {
        get: function () {
            var _a = this.props, animationName = _a.animation, animationDuration = _a.animationDuration, itemKey = _a.itemKey;
            var content = this.content;
            if (!animationName)
                return content;
            return (React.createElement(Transition_1.Transition, { className: 'gOverlay gInEffect', itemKey: itemKey, name: animationName, leave: false, appear: true, beforeAppear: function (el) { return style_1.assignStyle(el, { animationName: animationName, animationDuration: animationDuration }); } }, content));
        },
        enumerable: true,
        configurable: true
    });
    ModalDOM.prototype.render = function () {
        var _a = this.props, className = _a.className, style = _a.style;
        var _b = this, animateContent = _b.animateContent, mask = _b.mask;
        return (React.createElement("div", { className: classSet_1.classSet('wModalDOM gOverlay gClickThrough', className), style: style },
            mask,
            animateContent));
    };
    ModalDOM.defaultProps = {
        animation: 'zoomIn',
        animationDuration: '0.5s',
        minWidth: 200,
        maxWidth: '90%',
        minHeight: 100,
        maxHeight: '90%'
    };
    ModalDOM = tslib_1.__decorate([
        KeyboardEvents_1.KeyboardEvents.apply(),
        OutsideClickable_1.OutsideClickable.apply()
    ], ModalDOM);
    return ModalDOM;
}(React.PureComponent));
exports.ModalDOM = ModalDOM;

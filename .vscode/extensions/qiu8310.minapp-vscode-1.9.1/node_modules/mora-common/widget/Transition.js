"use strict";
// 依赖于 react-transition-group@1.x.x
// 作为 TransitionGroup 的 child 使用，参考 Modal widget
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var onTransitionEnd_1 = require("../dom/onTransitionEnd");
var TransitionGroup = require("react-transition-group/TransitionGroup");
exports.TransitionGroup = TransitionGroup;
var TransitionGroupItem = /** @class */ (function (_super) {
    tslib_1.__extends(TransitionGroupItem, _super);
    function TransitionGroupItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TransitionGroupItem.prototype.reflow = function (el) {
        /* tslint:disable */
        el.scrollTop;
        /* tslint:enable */
    };
    TransitionGroupItem.prototype.call = function (location, type) {
        var fn = this.props[location + type[0].toUpperCase() + type.slice(1)];
        if (typeof fn === 'function')
            fn(this.el);
    };
    TransitionGroupItem.prototype.will = function (type, callback) {
        var _this = this;
        // this['_will_' + type] = true
        if (!this.props[type])
            return callback();
        var _a = this, el = _a.el, props = _a.props;
        var name = props.name;
        this.call('before', type);
        el.classList.add(name + props[type + 'Suffix']);
        setTimeout(function () {
            _this.reflow(el);
            _this.call('on', type);
            el.classList.add(name + props[type + 'ActiveSuffix']);
            onTransitionEnd_1.onTransitionEnd(el, callback);
        }, 16);
    };
    TransitionGroupItem.prototype.did = function (type) {
        var _a = this, el = _a.el, props = _a.props;
        var name = props.name;
        if (!props[type])
            return;
        if (!el)
            return; // 很奇怪，有时候组件已经消失了，还会多余地调用一次 did
        el.classList.remove(name + props[type + 'Suffix']);
        el.classList.remove(name + props[type + 'ActiveSuffix']);
        this.call('after', type);
    };
    TransitionGroupItem.prototype.componentWillAppear = function (callback) {
        this.will('appear', callback);
    };
    TransitionGroupItem.prototype.componentDidAppear = function () {
        this.did('appear');
    };
    TransitionGroupItem.prototype.componentWillEnter = function (callback) {
        this.will('enter', callback);
    };
    TransitionGroupItem.prototype.componentDidEnter = function () {
        this.did('enter');
    };
    TransitionGroupItem.prototype.componentWillLeave = function (callback) {
        this.will('leave', callback);
    };
    TransitionGroupItem.prototype.componentDidLeave = function () {
        this.did('leave');
    };
    TransitionGroupItem.prototype.render = function () {
        var _this = this;
        var _a = this.props, component = _a.component, componentProps = _a.componentProps, className = _a.className, style = _a.style, children = _a.children;
        var ref = function (e) { return _this.el = e; };
        var props = tslib_1.__assign({ ref: ref, className: className, style: style }, componentProps);
        return React.createElement(component, props, children);
        // return <span ref={e => this.el = e} className={className} style={style} children={children} />
    };
    TransitionGroupItem.defaultProps = {
        component: 'div',
        componentProps: {},
        appear: false,
        appearSuffix: 'Appear',
        appearActiveSuffix: 'AppearActive',
        enter: true,
        enterSuffix: 'Enter',
        enterActiveSuffix: 'EnterActive',
        leave: true,
        leaveSuffix: 'Leave',
        leaveActiveSuffix: 'LeaveActive'
    };
    return TransitionGroupItem;
}(React.PureComponent));
exports.TransitionGroupItem = TransitionGroupItem;
var Transition = /** @class */ (function (_super) {
    tslib_1.__extends(Transition, _super);
    function Transition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Transition.prototype.render = function () {
        var _a = this.props, key = _a.itemKey, items = _a.items, groupProps = _a.groupProps, rest = tslib_1.__rest(_a, ["itemKey", "items", "groupProps"]);
        if (!rest.name)
            return rest.children; // 如果没有指定动画的名称，或者动画名称为 null，则没必要做动画了
        if (items && items.length && !rest.children)
            rest.children = items[key];
        return React.createElement(TransitionGroup, tslib_1.__assign({}, groupProps),
            React.createElement(TransitionGroupItem, tslib_1.__assign({ key: key }, rest)));
    };
    Transition.defaultProps = {
        groupProps: {
            component: 'div'
        }
    };
    return Transition;
}(React.PureComponent));
exports.Transition = Transition;

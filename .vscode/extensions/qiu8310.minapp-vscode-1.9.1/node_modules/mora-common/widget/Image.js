"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region import
var React = require("react");
var assign = require("mora-scripts/libs/lang/assign");
var classSet_1 = require("../util/classSet");
var url_1 = require("../util/url");
var warn_1 = require("../util/warn");
var viewport_1 = require("../dom/viewport");
var loadImage_1 = require("../dom/loadImage");
var DotImages_1 = require("../util/DotImages");
var Image = /** @class */ (function (_super) {
    tslib_1.__extends(Image, _super);
    function Image() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.loaded = false;
        _this.destroied = false;
        return _this;
    }
    Image.prototype.getContainer = function () {
        var _a = this.props, container = _a.container, noCacheContainer = _a.noCacheContainer;
        if (this.cachedContainer && !noCacheContainer)
            return this.cachedContainer;
        this.cachedContainer = container
            ? typeof container === 'function' ? container() : container
            : undefined;
        if (process.env.NODE_ENV !== 'production' && typeof container === 'function' && !this.cachedContainer) {
            warn_1.warn('你给 Image 组件设置了 container 函数，但函数返回了空，没有返回 dom');
        }
        return this.cachedContainer;
    };
    Image.prototype.getLazyloadSrc = function () {
        var placeholdSrc = this.props.placeholdSrc;
        return placeholdSrc === 'black' ? DotImages_1.BlackDotImage : placeholdSrc === 'white' ? DotImages_1.WhiteDotImage : placeholdSrc;
    };
    Image.prototype.getRealSrc = function () {
        var _a = this.props, ratio = _a.ratio, src = _a.src;
        var dpr = window.devicePixelRatio || 1; // 低端机没有 devicePixelRatio 就当作 1 处理
        var query = typeof ratio === 'function' ? ratio(dpr) : "dpr=" + dpr + ":" + ratio;
        return ratio ? url_1.appendQuery(src, query) : src; // 交给服务器处理图片的大小
    };
    Image.prototype.load = function () {
        var el = this.el;
        var _a = this.props, bg = _a.bg, error = _a.error, successClass = _a.successClass, errorClass = _a.errorClass, loadingClass = _a.loadingClass, fade = _a.fade;
        if (loadingClass)
            el.classList.add(loadingClass);
        var src = this.getRealSrc();
        loadImage_1.loadImage(src)
            .then(function (img) {
            if (!el)
                return; // 执行此异步函数时，可能已经 destroy 过了
            if (bg)
                el.style.backgroundImage = "url(" + src + ")";
            else
                el.setAttribute('src', src);
            if (loadingClass)
                el.classList.remove(loadingClass);
            if (successClass)
                el.classList.add(successClass);
            if (fade && ('transition' in el.style)) {
                el.style.opacity = '0';
                setTimeout(function () {
                    /* tslint:disable */
                    el.scrollTop;
                    /* tslint:enable */
                    el.style.transition = "opacity " + (typeof fade === 'number' ? fade : 600) + "ms ease-in";
                    el.style.opacity = '1';
                }, 16);
            }
        })
            .catch(function (e) {
            if (!el)
                return; // 执行此异步函数时，可能已经 destroy 过了
            if (error)
                error(e);
            if (loadingClass)
                el.classList.remove(loadingClass);
            if (errorClass)
                el.classList.add(errorClass);
        });
    };
    Image.prototype.componentDidMount = function () {
        var _this = this;
        var container = this.getContainer();
        var _a = this.props, enableIntersectionObserver = _a.enableIntersectionObserver, offset = _a.offset;
        this.offBind = viewport_1.viewport.listen(this.el, function () {
            var _a = _this, destroied = _a.destroied, loaded = _a.loaded;
            if (loaded || destroied)
                return;
            _this.loaded = true;
            _this.destroy();
            _this.load();
        }, {
            enableIntersectionObserver: enableIntersectionObserver, container: container, offset: offset, throttle: 200
        });
    };
    Image.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.src !== prevProps.src) {
            this.load();
        }
    };
    Image.prototype.destroy = function () {
        this.destroied = true;
        if (this.offBind) {
            this.offBind();
            this.offBind = null;
        }
    };
    Image.prototype.componentWillUnmount = function () {
        this.destroy();
    };
    Image.prototype.render = function () {
        var _this = this;
        // 所有自定义属性需要列出来，不能注入到 props 中
        var _a = this.props, enableIntersectionObserver = _a.enableIntersectionObserver, src = _a.src, lazyload = _a.lazyload, fade = _a.fade, offset = _a.offset, placeholdSrc = _a.placeholdSrc, error = _a.error, errorClass = _a.errorClass, successClass = _a.successClass, loadingClass = _a.loadingClass, container = _a.container, noCacheContainer = _a.noCacheContainer, ratio = _a.ratio, bg = _a.bg, component = _a.component, _b = _a.style, style = _b === void 0 ? {} : _b, className = _a.className, square = _a.square, width = _a.width, height = _a.height, rounded = _a.rounded, props = tslib_1.__rest(_a, ["enableIntersectionObserver", "src", "lazyload", "fade", "offset", "placeholdSrc", "error", "errorClass", "successClass", "loadingClass", "container", "noCacheContainer", "ratio", "bg", "component", "style", "className", "square", "width", "height", "rounded"]);
        component = !bg ? 'img' : component;
        src = lazyload ? this.getLazyloadSrc() : this.getRealSrc();
        className = classSet_1.classSet('wImage', className);
        var ref = function (el) { return _this.el = el; };
        // 有可能指定为 0
        if (square != null) {
            width = width == null ? square : width;
            height = height == null ? square : height;
        }
        if (width != null)
            style.width = width;
        if (height != null)
            style.height = height;
        if (rounded)
            style.borderRadius = rounded === true ? '50%' : rounded;
        if (bg) {
            style.backgroundImage = "url(" + src + ")";
            assign(props, { ref: ref, className: className, style: style });
        }
        else {
            if (!style.display)
                style.display = 'block';
            assign(props, { ref: ref, src: src, className: className, width: width, height: height, style: style });
        }
        return React.createElement(component, props);
    };
    Image.defaultProps = {
        lazyload: true,
        fade: true,
        offset: 100,
        placeholdSrc: DotImages_1.WhiteDotImage,
        errorClass: 'wImage-loadError',
        successClass: 'wImage-loaded',
        loadingClass: 'wImage-loading',
        component: 'div'
    };
    return Image;
}(React.PureComponent));
exports.Image = Image;

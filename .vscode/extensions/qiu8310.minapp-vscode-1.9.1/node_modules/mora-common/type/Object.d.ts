/**
 *
 * Take an existing type and make each of its properties entirely optional
 *
 * @example
 *
 *   interface IPerson {
 *     name: string
 *     age: number
 *     location: string
 *   }
 *   interface IPartialPerson {
 *     name?: string
 *     age?: number
 *     location?: string
 *   }
 *   type PartialPerson = Partial<IPerson> // 等价于 IPartialPerson
 *
 */
/** Keep types the same, but make each property to be read-only */
export declare type Readonly<T> = {
    readonly [P in keyof T]: T[P];
};
/** Same property names, but make the value a promise instead of a concrete one */
export declare type Deferred<T> = {
    [P in keyof T]: Promise<T[P]>;
};
/** Wrap proxies around properties of T */
export declare type Proxify<T> = {
    [P in keyof T]: {
        get(): T[P];
        set(v: T[P]): void;
    };
};
/** 去除对象中指定的 key */
export interface Point {
    x: number;
    y: number;
}

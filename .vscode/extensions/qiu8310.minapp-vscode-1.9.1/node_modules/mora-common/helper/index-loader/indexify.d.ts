/// <reference types="node" />
import * as fs from 'fs';
export interface IIndexifyOptions {
    /**
     * 指定生成的 index.d.ts 文件会存放的位置，默认是 indexify 第一个参数指定的 folder
     *
     * 指定一个和 folder 不一样的目录会导致程序重新计算文件的引用
     */
    root?: string;
    /** 如果遇到目录下有个 index.d.ts 或 index.ts 或 index.tsx 文件，则会把它当作入口文件，不继续处理此目录下的其它所有文件和子目录。开启此选项可以禁用此功能 */
    noCheckIndex?: boolean;
    /** 启用将 export default 的导出的变量重新 alias 到对应的模块名称 */
    renameDefault?: boolean;
    /** 对当前文件 export default 导出成另一个指定的名字，默认是当前文件名或文件的目录名（文件名是 index 时用目录名） */
    rename?: (file: string) => string;
    /** 递归遍历的目录的深度，默认 0，全部递归完 */
    deep?: number;
    /** 自定义过滤函数，返回需要处理的文件或文件夹 */
    filter?: (stats: fs.Stats, name: string, relativePath: string, absolutePath: string) => boolean;
}
export declare function indexify(folder: string, options?: IIndexifyOptions): string;

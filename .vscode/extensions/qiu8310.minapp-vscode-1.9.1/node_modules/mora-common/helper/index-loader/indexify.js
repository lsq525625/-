"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var path = require("path");
var fs = require("fs");
var os = require("os");
var string_1 = require("../../util/string");
var fn_1 = require("./inc/fn");
var config_1 = require("./inc/config");
var File_1 = require("./inc/File");
function rename(file) {
    var name = path.basename(file, path.extname(file)).replace(/\.d$/, '');
    if (/index/i.test(name))
        name = path.basename(path.dirname(file));
    name = name.toLowerCase()
        .split(/[-_\s]+/).map(function (w) { return string_1.capitalize(w); })
        .join('');
    return name;
}
function indexify(folder, options) {
    if (options === void 0) { options = {}; }
    var optionFilter = options.filter || (function () { return true; });
    folder = path.resolve(folder);
    var getRelativePath = function (absolutePath) {
        return path.relative(options.root || folder, absolutePath);
    };
    var map = {};
    var addExportName = function (name, from) {
        var exists = map.hasOwnProperty(name);
        if (exists) {
            fn_1.warn("\u91CD\u590D\u5BFC\u51FA\u4E86\u53D8\u91CF " + name + " \uFF0C\u81EA\u52A8\u5FFD\u7565\u4E86\u540E\u9762\u7684");
            fn_1.info("    " + map[name]);
            fn_1.info("    " + from);
        }
        else {
            map[name] = from;
        }
        return !exists;
    };
    var filter = function (stats, name, absolutePath) { return optionFilter(stats, name, getRelativePath(absolutePath), absolutePath); };
    var opts = tslib_1.__assign({ rename: rename, deep: 0 }, options, { filter: filter, getRelativePath: getRelativePath, imports: [], exports: [], exportAll: [], addExportName: addExportName });
    indexifyFolder(folder, 1, opts);
    var lines = [];
    opts.imports.forEach(function (i) { return lines.push(i); });
    opts.exports.forEach(function (e) { return lines.push(e); });
    if (opts.exportAll.length)
        lines.push("export {" + opts.exportAll.join(', ') + "}");
    return lines.join(os.EOL);
}
exports.indexify = indexify;
function indexifyFolder(folder, currentDeep, opts) {
    var indexes = ['index.d.ts', 'index.ts', 'index.tsx'];
    if (opts.deep !== 0 && currentDeep > opts.deep)
        return;
    if (currentDeep !== 1 && !opts.noCheckIndex) {
        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {
            var f = indexes_1[_i];
            if (checkIndex(path.join(folder, f), opts))
                return;
        }
    }
    fs.readdirSync(folder)
        .forEach(function (name) {
        if (currentDeep === 1 && indexes.indexOf(name) >= 0)
            return;
        if (['_', '.'].indexOf(name[0]) >= 0)
            return;
        var absolutePath = path.join(folder, name);
        var stat = fs.statSync(absolutePath);
        if (stat.isFile() && !(/\.tsx?$/.test(name)))
            return;
        if (opts.filter(stat, name, absolutePath)) {
            if (stat.isFile()) {
                indexifyFile(absolutePath, opts);
            }
            else if (stat.isDirectory()) {
                indexifyFolder(absolutePath, currentDeep + 1, opts);
            }
        }
    });
}
function checkIndex(file, opts) {
    if (fn_1.isFileExists(file)) {
        indexifyFile(file, opts);
        return true;
    }
    return false;
}
function indexifyFile(file, opts) {
    var f = File_1.compile(file);
    var relative = opts.getRelativePath(file.replace(/(\.d)?\.tsx?$/, '')); // 去除后缀
    var from = './' + relative.replace(/\/index$/, '/'); // 去除最后的 index
    var importfrom = "from '" + from + "'";
    if (f.oldJsExport) {
        var name_1 = path.basename(relative);
        if (opts.addExportName(name_1, from)) {
            opts.exportAll.push(name_1);
            opts.imports.push("import * as " + name_1 + " " + importfrom);
        }
    }
    else {
        var declares = f.declares.concat(Object.keys(f.exports));
        var originalLength = declares.length;
        declares.sort();
        var name_2;
        if (opts.renameDefault && declares.indexOf(config_1.KEY_DEFAULT) >= 0) {
            declares = declares.filter(function (d) { return d !== config_1.KEY_DEFAULT; });
            name_2 = opts.rename(f.src);
            if (name_2 && !opts.addExportName(name_2, from))
                name_2 = false;
        }
        declares = declares.filter(function (d) { return opts.addExportName(d, from); });
        if (name_2)
            declares.unshift(config_1.KEY_DEFAULT + " as " + name_2);
        if (declares.length) {
            if (!name_2 && declares.length === originalLength) {
                opts.exports.push("export * " + importfrom);
            }
            else {
                opts.exports.push("export {" + declares.join(', ') + "} " + importfrom);
            }
        }
    }
}

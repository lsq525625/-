"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var os = require("os");
var path = require("path");
var once_1 = require("../../util/once");
var fn_1 = require("./inc/fn");
var config_1 = require("./inc/config");
var dts2djson_1 = require("./dts2djson");
var EOL = os.EOL;
var splitRegexp = /\s*,\s*/;
var asRegexp = /^(\w+)\s+as\s+(\w+)$/;
var getModuleExportImportExpReg = (function () {
    var cache = {};
    return function (name) {
        if (!cache[name])
            cache[name] = new RegExp("^([ \\t]*)(import|export)\\s+\\{([^}]+)\\}\\s+from\\s+(['\"])" + name + "\\4", 'mg');
        return cache[name];
    };
})();
var getDJson = (function () {
    var cache = {};
    return function (sourceFile, module) {
        if (!module.realtimeParse && cache[module.name])
            return cache[module.name];
        var rootDir = fn_1.env(sourceFile).rootDir;
        var moduleRoot = module.root || path.join(rootDir, 'node_modules', module.name);
        // 优先读取 .d.json 文件
        var djsonFile = tryToGetFile(module, 'djsonFile', path.join(moduleRoot, 'index.d.json'));
        if (djsonFile) {
            if (module.realtimeParse)
                return JSON.parse(fs.readFileSync(djsonFile).toString());
            return require(djsonFile);
        }
        // 其次 package.json 中的 module/typings 字段
        var dtsFile;
        if (moduleRoot.indexOf('node_modules') > 0) {
            try {
                var pkg = require(path.join(moduleRoot, 'package.json'));
                var moduleTsdFile = pkg.module || pkg.typings;
                if (moduleTsdFile) {
                    var tmpfilepath = path.join(moduleRoot, moduleTsdFile);
                    if (!fn_1.isFileExists(tmpfilepath)) {
                        fn_1.warn("\u6A21\u5757 " + module.name + " \u6307\u5B9A\u7684 module/typings \u6587\u4EF6 " + moduleTsdFile + " \u4E0D\u5B58\u5728");
                    }
                    else {
                        // pathPrefix = path.dirname(moduleTsdFile).replace(/^\.\/?/, '')
                        dtsFile = tmpfilepath;
                    }
                }
            }
            catch (e) { }
        }
        // 最后尝试 index.d.ts 文件
        if (!dtsFile)
            dtsFile = tryToGetFile(module, 'dtsFile', path.join(moduleRoot, 'index.d.ts'));
        if (!dtsFile)
            throw new Error("\u914D\u7F6E\u6A21\u5757 " + module.name + " \u6CA1\u6709\u6307\u5B9A dtsFile\uFF0C\u7CFB\u7EDF\u65E0\u6CD5\u627E\u5230\u9ED8\u8BA4\u7684 .d.ts \u6587\u4EF6");
        var djson = dts2djson_1.dts2djson(dtsFile, { disableCache: module.realtimeParse });
        // 当 package.json 中定义的 typings 使用了子文件夹时，子文件夹的目录需要记录下来，然后注入到 djson 中
        // 如 antd 中定义了 module: es/index.d.ts；所以需要给 djson 中的所有文件添加 es/ 的前缀
        var pathPrefix = path.relative(moduleRoot, path.dirname(dtsFile));
        if (pathPrefix && pathPrefix !== '.') {
            Object.keys(djson).forEach(function (key) { return djson[key] = path.join(pathPrefix, djson[key]); });
        }
        cache[module.name] = djson;
        return djson;
    };
})();
function tryToGetFile(module, key, defaultFile) {
    if (module[key])
        return module[key];
    if (defaultFile && fn_1.isFileExists(defaultFile)) {
        if (module.debug)
            fn_1.info("====> \u81EA\u52A8\u8BFB\u53D6\u5230 " + module.name + " \u7684 " + key + " \u6587\u4EF6 " + defaultFile);
        module[key] = defaultFile;
        return defaultFile;
    }
    return;
}
function replacer(sourceFile, contentOrModules, modules) {
    sourceFile = path.resolve(sourceFile);
    var sourceContent = contentOrModules;
    if (contentOrModules && Array.isArray(contentOrModules))
        modules = contentOrModules;
    if (!sourceContent || typeof sourceContent !== 'string')
        sourceContent = fs.readFileSync(sourceFile).toString();
    var logHead = once_1.once(function () { return console.log(EOL + "::::: " + sourceFile + " :::::"); });
    var refModules = [];
    var replacedContent = modules.reduce(function (content, module) {
        return content.replace(getModuleExportImportExpReg(module.name), function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            args.unshift(refModules, getDJson(sourceFile, module));
            if (module.debug)
                logHead();
            return replace.apply(module, args);
        });
    }, sourceContent);
    return { sourceFile: sourceFile, sourceContent: sourceContent, replacedContent: replacedContent, refModules: refModules };
}
exports.replacer = replacer;
function replace(refModules, djson, raw, preSpaces, inOut, rawimports, quote) {
    var _this = this;
    var p = rawimports.match(/^\s*/);
    var s = rawimports.match(/\s*$/);
    var bracketPrefixSpace = p ? p[0] : '';
    var bracketSuffixSpace = s ? s[0] : '';
    var joinBracketFields = function (fields) { return "" + bracketPrefixSpace + fields.join(', ') + bracketSuffixSpace; };
    // 先分析出要导出或导入的变量，方便后面的批量操作
    var result = { variables: {}, files: [] };
    fn_1.stripInlineComment(rawimports.trim()).split(splitRegexp).reduce(function (res, field) {
        var fieldKey = field;
        var fieldRef;
        if (asRegexp.test(field)) {
            fieldRef = RegExp.$1;
            fieldKey = RegExp.$2;
        }
        var rawfile = djson[fieldRef || fieldKey];
        if (!rawfile)
            throw new Error("\u8981\u5BFC\u51FA\u7684\u5B57\u6BB5 \"" + field + "\" \u4E0D\u5728 " + _this.name + " \u7684\u6A21\u5757\u4E2D");
        // file 和 alias 都可能是 空字符串
        var _a = rawfile.split(config_1.KEY_SEPARATOR), file = _a[0], alias = _a[1];
        file = _this.name + (file ? '/' + file : '');
        if (!res.variables[file]) {
            if (refModules.indexOf(file) < 0)
                refModules.push(file);
            res.files.push(file);
            res.variables[file] = [];
        }
        res.variables[file].push({ alias: alias, field: field, fieldKey: fieldKey, fieldRef: fieldRef });
        return res;
    }, result);
    // 再来一个个替换
    var rawReplace = result.files.reduce(function (lines, file) {
        // 兼容 window 换行符
        var fromFile = "from " + quote + file.replace(/\\/g, '/') + quote;
        var variables = result.variables[file];
        var aliasFields = variables
            .filter(function (it) {
            if (it.alias === config_1.KEY_ALL) {
                lines.push("" + preSpaces + inOut + " * as " + it.fieldKey + " " + fromFile); // import * as xxx from './xxx'
                return false;
            }
            else if (it.alias === config_1.KEY_DEFAULT) {
                lines.push("" + preSpaces + inOut + " " + it.fieldKey + " " + fromFile); // import xxx from './xxx'
                return false;
            }
            return true;
        })
            .map(function (it) { return it.alias ? it.alias + " as " + it.fieldKey : it.field; });
        if (aliasFields.length)
            lines.push("" + preSpaces + inOut + " {" + joinBracketFields(aliasFields) + "} " + fromFile);
        return lines;
    }, []).join(EOL);
    if (this.debug)
        fn_1.info(raw + "  =>  " + EOL + rawReplace);
    return rawReplace;
}

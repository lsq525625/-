"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var config = require("./config");
var fn = require("./fn");
var File = /** @class */ (function () {
    function File(src, content) {
        this.imports = {};
        this.declares = [];
        this.exports = {};
        /** 当内容中出现了 export = xxx，此值为 true；此字段主要给 indexify 程序用 */
        this.oldJsExport = false;
        this.src = src;
        this.content = (content == null ? fs.readFileSync(src).toString() : content)
            .replace(config.exportNamespaceRegExp, ''); // 清除 namespace 的定义
    }
    File.compile = function (file, options) {
        if (options === void 0) { options = {}; }
        file = path.resolve(file);
        var cache = options.cache || File.cache;
        if (options.disableCache || !cache[file]) {
            cache[file] = new File(file, options.content).compile(options);
        }
        return cache[file];
    };
    File.prototype.compile = function (options) {
        if (options === void 0) { options = {}; }
        if (!options.disableAnalyzeImport)
            this.analyzeImport(options);
        this.analyzeExport(options);
        return this;
    };
    //#region analyzeExport
    File.prototype.stringifyExportKey = function (obj) {
        var from = obj.from.replace(/(\.d)?\.tsx?$/, '').replace(/\/index$/, '/');
        return (from + (obj.ref ? config.KEY_SEPARATOR + obj.ref : '')).replace(/\\/g, '/');
    };
    File.prototype._addExportKey = function (key, obj) {
        if (this.exports.hasOwnProperty(key)) {
            fn.warn("\u6587\u4EF6 " + this.src + " \u4E2D export \u7684\u53D8\u91CF " + key + " \u6709\u91CD\u590D\uFF0C\u5DF2\u81EA\u52A8\u8986\u76D6");
            fn.info("    " + this.stringifyExportKey(this.exports[key]));
            fn.info("    " + this.stringifyExportKey(obj));
        }
        this.exports[key] = obj;
    };
    File.prototype.analyzeExport = function (options) {
        var _this = this;
        this.content.replace(config.exportLineRegexp, function (rawline) {
            var line = fn.stripInlineComment(rawline);
            if (config.lineExportAllRegExp.test(line)) {
                // 没有导出任何变量
                _this.oldJsExport = true;
            }
            else if (config.lineExportLocalsFromRegexp.test(line) || config.lineExportAllFromRegExp.test(line)) {
                var locals = RegExp.$1.trim();
                var from_1 = _this.findReferedFile(RegExp.$2);
                if (!from_1)
                    throw new Error("\u627E\u4E0D\u5230 " + _this.src + " \u4E2D " + line + " \u5F15\u7528\u7684\u6587\u4EF6");
                var refFile_1 = File.compile(from_1, options); // 继续编译下一个文件
                if (locals !== '*') {
                    locals.split(config.splitRegexp)
                        .map(function (local) {
                        var _a = _this.splitToKeyRef(local), key = _a.key, ref = _a.ref;
                        _this._addExportKey(key, { from: from_1, ref: ref });
                    });
                }
                else {
                    refFile_1.declares.forEach(function (key) { return _this._addExportKey(key, { from: refFile_1.src }); });
                    Object.keys(refFile_1.exports).forEach(function (key) { return _this._addExportKey(key, refFile_1.exports[key]); });
                }
            }
            else if (config.lineExportDefaultRegexp.test(line)) {
                _this.declares.push(config.KEY_DEFAULT);
            }
            else if (config.lineExportVariableRegexp.test(line)) {
                var d = RegExp.$1;
                // ts 中允许重载，所以需要去除同一文件中重新定义的声明
                if (_this.declares.indexOf(d) < 0)
                    _this.declares.push(d);
            }
            else if (config.lineExportLocalsRegexp.test(line)) {
                var locals = RegExp.$1.trim();
                if (locals) {
                    locals.split(config.splitRegexp).forEach(function (local) {
                        var _a = _this.splitToKeyRef(local), key = _a.key, ref = _a.ref;
                        var iptKey = ref || key;
                        var ipt = _this.imports[iptKey];
                        if (ipt) {
                            var from = ipt.from;
                            var iptFile = File.compile(from, options); // 继续编译下一个文件
                            if (ipt.isAll) {
                                _this._addExportKey(key, { from: from, ref: config.KEY_ALL });
                            }
                            else if (ipt.isDefault) {
                                _this._addExportKey(key, { from: from, ref: config.KEY_DEFAULT });
                            }
                            else {
                                var refKey = ipt.ref || iptKey;
                                if (iptFile.declares.indexOf(refKey)) {
                                    _this._addExportKey(key, { from: from, ref: refKey === key ? undefined : refKey });
                                }
                                else if (iptFile.exports[refKey]) {
                                    _this._addExportKey(key, iptFile.exports[refKey]);
                                }
                                else {
                                    fn.error("\u5728\u6587\u4EF6 " + from + " \u627E\u4E0D\u5230\u6587\u4EF6 " + _this.src + " \u9700\u8981\u7684\u53D8\u91CF " + refKey);
                                    throw new SyntaxError('compile 失败');
                                }
                            }
                        }
                        else {
                            _this.declares.push(key);
                        }
                    });
                }
            }
            else {
                fn.error("\u6682\u65F6\u4E0D\u652F\u6301\u89E3\u6790 " + line + " \u4E2D\u7684 export \u8BED\u6CD5\uFF0C\u6765\u81EA\u6587\u4EF6 " + _this.src);
                throw new SyntaxError('compile 失败');
            }
            return rawline;
        });
    };
    //#endregion
    //#region analyzeImport
    File.prototype._addImportKey = function (key, obj, options, checkIfIsReallyDefault) {
        var from = this.findReferedFile(obj.from);
        if (!from) {
            // 如果是相对目录时，不应该解析失败！
            // 绝对目录可能是 node_modules 下的目录
            if (obj.from.charAt(0) === '.')
                fn.warn("\u65E0\u6CD5\u89E3\u6790\u5230\u6587\u4EF6 \"" + obj.from + "\"\uFF0C\u6765\u81EA\u6587\u4EF6 " + this.src + "\uFF0C\u5DF2\u81EA\u52A8\u5FFD\u7565");
            return;
        }
        if (checkIfIsReallyDefault) {
            if (File.compile(from, options).declares.indexOf(config.KEY_DEFAULT) < 0) {
                obj.isDefault = false;
                obj.isAll = true;
            }
        }
        obj.from = from;
        if (this.imports.hasOwnProperty(key)) {
            fn.warn("\u6587\u4EF6 " + this.src + " \u4E2D import \u7684\u53D8\u91CF " + key + " \u6709\u91CD\u590D\uFF0C\u5DF2\u81EA\u52A8\u8986\u76D6");
        }
        this.imports[key] = obj;
    };
    File.prototype._analyzeImportLocals = function (locals, from, options) {
        var _this = this;
        locals = locals.trim();
        if (!locals)
            return;
        locals.split(config.splitRegexp)
            .forEach(function (field) {
            var _a = _this.splitToKeyRef(field), key = _a.key, ref = _a.ref;
            _this._addImportKey(key, { ref: ref, from: from }, options);
        });
    };
    File.prototype.analyzeImport = function (options) {
        var _this = this;
        this.content.replace(config.importLineRegExp, function (rawline) {
            var line = fn.stripInlineComment(rawline);
            if (config.lineImportDefaultRegExp.test(line)) {
                _this._addImportKey(RegExp.$1, { isDefault: true, from: RegExp.$2 }, options, true);
            }
            else if (config.lineImportAllRegExp.test(line)) {
                _this._addImportKey(RegExp.$1, { isAll: true, from: RegExp.$2 }, options);
            }
            else if (config.lineImportAllAndLocalsRegExp1.test(line)) {
                var all = RegExp.$1;
                var alias = RegExp.$2;
                var from = RegExp.$3;
                _this._addImportKey(all, { isAll: true, from: from }, options);
                _this._analyzeImportLocals(alias, from, options);
            }
            else if (config.lineImportAllAndLocalsRegExp1.test(line)) {
                var alias = RegExp.$1;
                var all = RegExp.$2;
                var from = RegExp.$3;
                _this._addImportKey(all, { isAll: true, from: from }, options);
                _this._analyzeImportLocals(alias, from, options);
            }
            else if (config.lineImportLocalsRegExp.test(line)) {
                _this._analyzeImportLocals(RegExp.$1, RegExp.$2, options);
            }
            else {
                // 可能是 import './a.scss' 的调用形式
                if (config.lineImportOnlyRegExp.test(line))
                    return rawline;
                fn.warn("\u6682\u65F6\u4E0D\u652F\u6301\u89E3\u6790 " + line + " \u4E2D\u7684 import\uFF0C\u6765\u81EA\u6587\u4EF6 " + _this.src);
            }
            return rawline;
        });
    };
    //#endregion
    File.prototype.splitToKeyRef = function (key) {
        if (config.asRegexp.test(key))
            return { key: RegExp.$2, ref: RegExp.$1 };
        return { key: key };
    };
    File.prototype.findReferedFile = function (ref, tryDirectory) {
        if (tryDirectory === void 0) { tryDirectory = true; }
        if (ref[ref.length - 1] === '/') {
            tryDirectory = false;
            ref += 'index'; // 如果是目录的话，取目录下的 index 文件
        }
        var base = path.resolve(path.dirname(this.src), ref);
        var dtsFile = base + '.d.ts';
        var tsFile = base + '.ts';
        var tsxFile = base + '.tsx';
        return fn.isFileExists(dtsFile) ? dtsFile
            : fn.isFileExists(tsFile) ? tsFile
                : fn.isFileExists(tsxFile) ? tsxFile
                    : tryDirectory ? this.findReferedFile(ref + '/', false) : null;
    };
    File.cache = {};
    return File;
}());
exports.File = File;
exports.compile = File.compile;

export interface IFileCompileOptions {
    /** 文件的内容，避免重复读取 */
    content?: string;
    /**
     * 因为有些会对 import 过来的变量处理下，所以所以有时可能需要开启此选项
     */
    disableAnalyzeImport?: boolean;
    /**
     * 不使用 cache，每次都重新 compile
     */
    disableCache?: boolean;
    /**
     * 指定缓存对象，方便引用。默认使用全局的 File.cache
     */
    cache?: {
        [key: string]: File;
    };
}
export interface IFileImportKey {
    /**
     * import {a as c} from 中的 a
     */
    ref?: string;
    from: string;
    isAll?: boolean;
    isDefault?: boolean;
}
export interface IFileExportKey {
    from: string;
    /**
     * ```
     *  export {a as c} from file // ref 为 a
     * ```
     * 或者
     * ```
     *  import a from file
     *  export {a as c}           // ref 应为 default
     */
    ref?: string;
}
export declare class File {
    static cache: {
        [key: string]: File;
    };
    static compile(file: string, options?: IFileCompileOptions): File;
    src: string;
    content: string;
    imports: {
        [key: string]: IFileImportKey;
    };
    declares: string[];
    exports: {
        [key: string]: IFileExportKey;
    };
    /** 当内容中出现了 export = xxx，此值为 true；此字段主要给 indexify 程序用 */
    oldJsExport: boolean;
    constructor(src: string, content?: string);
    compile(options?: IFileCompileOptions): this;
    stringifyExportKey(obj: IFileExportKey): string;
    private _addExportKey(key, obj);
    private analyzeExport(options);
    private _addImportKey(key, obj, options, checkIfIsReallyDefault?);
    private _analyzeImportLocals(locals, from, options);
    private analyzeImport(options);
    private splitToKeyRef(key);
    private findReferedFile(ref, tryDirectory?);
}
export declare const compile: typeof File.compile;

export interface ICustomStorageOptions {
    id?: string;
    type?: 'local' | 'session';
    memory?: boolean;
    maxMemoryValueLength?: number;
}
export declare class CustomStorage {
    id: string;
    memory: boolean;
    private options;
    private store;
    private cache;
    constructor(options?: ICustomStorageOptions);
    /**
     * 在不新建 Storage 实例的情况下，同步更新其它 ID 中的存储
     * @param {(string | string[])} ids - 所有需要同步更新的 ID
     * @param {(id: string) => void} fn - 执行更新的回调函数
     * @memberof CustomStorage
     */
    sync(ids: string | string[], fn: (this: CustomStorage, id: string) => void): void;
    /**
     * 设置存储
     * @param {string} key  - 存储的键名
     * @param {*} value - 存储的值
     * @param {number} [seconds] - 存储过期时间，默认永不过期
     * @memberof CustomStorage
     */
    set(key: string, value: any, seconds?: number): void;
    /**
     * 获取指定的存储的值
     * @template T
     * @param {string} key  - 存储的键名
     * @param {*} [defaultValue] - 如果存储不存在或过期，则返回此值
     * @returns {T} 存储的值
     * @memberof CustomStorage
     */
    get<T>(key: string, defaultValue?: any): T;
    /**
     * 判断指定的存储是否存在
     * @param {string} key - 存储的键名
     * @returns {boolean} 是否存在
     * @memberof CustomStorage
     */
    has(key: string): boolean;
    /**
     * 删除指定的存储
     * @param {string} key - 存储的键名
     * @memberof CustomStorage
     */
    del(key: string): void;
    /**
     * 清空当前 Storage
     * @memberof CustomStorage
     */
    empty(): void;
    private filter(obj, fn);
    private getKeyPrefix();
    private getStoreKey(key);
    private rawget(key);
}
export declare const storage: CustomStorage;

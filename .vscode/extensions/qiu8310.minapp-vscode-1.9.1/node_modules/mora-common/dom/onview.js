"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var delay_1 = require("../util/delay");
var onload_1 = require("./onload");
var once_1 = require("../util/once");
var array_1 = require("../util/array");
// debounce & throttle: http://drupalmotion.com/article/debounce-and-throttle-visual-explanation
function onview(fn, options) {
    if (options === void 0) { options = {}; }
    var _a = options.throttle, throttle = _a === void 0 ? 0 : _a, _b = options.debounce, debounce = _b === void 0 ? 0 : _b, _c = options.container, container = _c === void 0 ? null : _c, _d = options.events, events = _d === void 0 ? ['load', 'resize', 'scroll', 'orientationchange', 'pageshow'] : _d;
    var cb;
    if (throttle && throttle > 0) {
        cb = delay_1.throttle(fn, throttle);
    }
    else if (debounce && debounce > 0) {
        cb = delay_1.debounce(fn, debounce);
    }
    else {
        cb = fn;
    }
    var eventArray = array_1.toArray(events);
    if (eventArray.indexOf('pageshow'))
        cb = wrapPageshow(cb);
    if (eventArray.indexOf('load') >= 0)
        onload_1.onload(cb);
    eventArray = eventArray.filter(function (type) { return type !== 'load'; });
    eventArray.forEach(function (type) {
        // 指定了 container 的话，需要监听两个 scroll （保险起见）
        if (type === 'scroll' && container)
            container.addEventListener(type, cb);
        window.addEventListener(type, cb);
    });
    return once_1.once(function () {
        eventArray.forEach(function (type) {
            if (type === 'scroll' && container)
                container.removeEventListener(type, cb);
            window.removeEventListener(type, cb);
        });
    });
}
exports.onview = onview;
function wrapPageshow(cb) {
    return function (e) {
        if (e && e.type === 'pageshow') {
            // Persisted user state
            if (e.persisted)
                cb(e);
        }
        else {
            cb(e);
        }
    };
}

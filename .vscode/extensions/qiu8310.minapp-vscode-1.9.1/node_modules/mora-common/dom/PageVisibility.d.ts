/**
 * MDN: https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API
 *
 * Use Case:
 *  1. A site has an image carousel that shouldn't advance to the next slide
 *     unless the user is viewing the page.
 *  2. An application showing a dashboard of information doesn't want to poll
 *     the server for updates when the page isn't visible.
 *  3. A page wants to detect when it is being prerendered so it can keep
 *     accurate count of page views.
 *  4. A site wants to switch off sounds when a device is in standby mode
 *     (user pushes power button to turn screen off)
 */
import * as Events from 'mora-scripts/libs/lang/Events';
export interface IEvent {
    type: IState;
    originalEvent: any;
}
export declare type IState = 'visible' | 'hidden' | 'prerender' | 'unloaded';
export declare type IEventHandler = (e: IEvent) => void;
/**
 * unbind current listener functions
 */
export declare type IEventOffHandler = () => void;
export declare const PageVisibility: {
    event: Events;
    isSupported: boolean;
    readonly state: VisibilityState;
    readonly isHidden: boolean;
    readonly isVisible: boolean;
    on(states: "hidden" | "visible" | "prerender" | "unloaded" | VisibilityState[], handler: IEventHandler): IEventOffHandler;
    once(states: "hidden" | "visible" | "prerender" | "unloaded" | VisibilityState[], handler: IEventHandler): IEventOffHandler;
};

"use strict";
/* tslint:disable:no-empty */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * MDN: https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API
 *
 * Use Case:
 *  1. A site has an image carousel that shouldn't advance to the next slide
 *     unless the user is viewing the page.
 *  2. An application showing a dashboard of information doesn't want to poll
 *     the server for updates when the page isn't visible.
 *  3. A page wants to detect when it is being prerendered so it can keep
 *     accurate count of page views.
 *  4. A site wants to switch off sounds when a device is in standby mode
 *     (user pushes power button to turn screen off)
 */
var Events = require("mora-scripts/libs/lang/Events");
var array_1 = require("../util/array");
var event = new Events();
var doc = document;
var prefixes = ['', 'webkit', 'moz', 'ms', 'o'];
// 初始化
var isSupported = false;
var hiddenKey;
var visibilityChangeEvent;
var visibilityStateKey;
var state;
Object.keys(prefixes).some(function (prefix) {
    hiddenKey = prefixed(prefix, 'hidden');
    if (typeof doc[hiddenKey] !== 'undefined') {
        isSupported = true;
        visibilityChangeEvent = prefix + 'visibilitychange';
        visibilityStateKey = prefixed(prefix, 'visibilityState');
        return true;
    }
    return false;
});
if (isSupported) {
    state = getVisibilityState();
    doc.addEventListener(visibilityChangeEvent, listener);
}
else {
    state = 'visible';
}
/**
 * visible/hidden/prerender/unloaded
 * @returns IState
 */
function getVisibilityState() { return isSupported ? doc[visibilityStateKey] : 'visible'; }
function listener(e) {
    var currentState = getVisibilityState();
    if (currentState !== state) {
        state = currentState;
        event.emit(state, { type: state, originalEvent: e });
    }
}
function noop() { }
exports.PageVisibility = {
    /**
     * event 对象
     */
    event: event,
    /**
     * 是否支持 Page Visibility API
     * @type boolean
     */
    isSupported: isSupported,
    /**
     * 当前 Page Visibility 的 state
     * @type string
     */
    get state() { return state; },
    /**
     * 当前 state 是否是 hidden
     * @type boolean
     */
    get isHidden() { return isSupported ? doc[hiddenKey] : false; },
    /**
     * 当前 state 是否是 visible
     * @type boolean
     */
    get isVisible() { return isSupported ? !doc[hiddenKey] : true; },
    /**
     * 监听 page 状态变化
     * @param {IState | IState[]} states - 状态名称，可以是数组，支持：visible/hidden/prerender/unloaded
     * @param {Function} handler - 回调函数
     * @returns {IEventOffHandler} - off bind
     */
    on: function (states, handler) {
        if (!isSupported)
            return noop;
        var eventKey = array_1.toArray(states).join(' ');
        event.on(eventKey, handler);
        return function () { return event.off(eventKey, handler); };
    },
    /**
     * 监听 page 状态变化，监听完即删除
     * @param {IState | IState[]} states - 状态名称，可以是数组，支持：visible/hidden/prerender/unloaded
     * @param {Function} handler - 回调函数
     * @returns {IEventOffHandler} - off bind
     */
    once: function (states, handler) {
        if (!isSupported)
            return noop;
        var eventKey = array_1.toArray(states).join(' ');
        event.once(eventKey, handler);
        return function () { return event.off(eventKey, handler); };
    }
};
function prefixed(prefix, prop) {
    return prefix ? prefix + prop.charAt(0) + prop.slice(1) : prop;
}

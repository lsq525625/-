"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("../helper/polyfill/responsive.declare");
var assign = require("mora-scripts/libs/lang/assign");
var delay_1 = require("../util/delay");
var math_1 = require("../util/math");
function responsive(options) {
    if (options === void 0) { options = {}; }
    var _a = options.screenRemSize, screenRemSize = _a === void 0 ? 10 : _a, _b = options.minWidth, minWidth = _b === void 0 ? 320 : _b, _c = options.designWidth, designWidth = _c === void 0 ? 375 : _c, _d = options.maxWidth, maxWidth = _d === void 0 ? 540 : _d;
    //
    //  注意： 直接下面的 meta 就不用 rem 单位了，但有表单时会导致屏幕放大
    //    <meta name="viewport" content="width=320">
    //
    // SCREEN_REM_SIZE 为 10 表示 10rem 为当前屏幕的宽度
    // 注意：保证 SCREEN_REM_SIZE * 12 < MIN_WIDTH, Chrome 下最小字体是 12px
    var SCREEN_REM_SIZE = screenRemSize;
    var MIN_WIDTH = minWidth;
    var MAX_WIDTH = maxWidth;
    var dpr = window.devicePixelRatio || 1;
    var hairlines = false;
    if (SCREEN_REM_SIZE * 12 > MIN_WIDTH)
        console.warn("root \u5B57\u4F53\u5728 " + MIN_WIDTH + " \u4E0B\u4F1A\u5C0F\u4E8E 12px");
    var baseRootFontSize = designWidth / screenRemSize;
    var docEl = document.documentElement;
    function refresh() {
        var rootFontSize = math_1.between(docEl.clientWidth, MIN_WIDTH, MAX_WIDTH) / SCREEN_REM_SIZE;
        docEl.style.fontSize = rootFontSize + 'px';
    }
    function px2rem(px) {
        return px / baseRootFontSize;
    }
    function rem2px(rem) {
        return rem * baseRootFontSize;
    }
    function p2r(px) {
        if (typeof px === 'string') {
            return px.replace(/([\.\d]+)px/g, function (_, num) {
                if (num.indexOf('.') >= 0)
                    return p2r(parseFloat(num));
                else
                    return p2r(parseInt(num, 10));
            });
        }
        else {
            if (px === 0)
                return '0';
            return px2rem(px).toFixed(5) + 'rem';
        }
    }
    // function throttleRefresh() {
    //   clearTimeout(tid)
    //   tid = setTimeout(refresh, 300)
    // }
    var throttleRefresh = delay_1.throttle(refresh, 300);
    window.addEventListener('resize', throttleRefresh);
    window.addEventListener('pageshow', function (e) { if (e.persisted)
        throttleRefresh(); });
    if (document.body)
        refresh();
    else
        document.addEventListener('DOMContentLoaded', refresh);
    // detect 0.5px supports
    if (dpr >= 2) {
        var fakeBody = document.createElement('body');
        var testElement = document.createElement('div');
        testElement.style.border = '.5px solid transparent';
        fakeBody.appendChild(testElement);
        docEl.appendChild(fakeBody);
        if (testElement.offsetHeight === 1)
            docEl.classList.add('hairlines');
        docEl.removeChild(fakeBody);
    }
    assign(window, { px2rem: px2rem, p2r: p2r, rem2px: rem2px, responsive: refresh, meta: { dpr: dpr, hairlines: hairlines } });
    // return {px2rem, p2r, rem2px, responsive: refresh}
}
exports.responsive = responsive;

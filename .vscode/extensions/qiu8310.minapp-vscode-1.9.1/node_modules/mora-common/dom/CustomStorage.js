"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var warn_1 = require("../util/warn");
var array_1 = require("../util/array");
var DEFAULT_OPTIONS = {
    id: 'v1',
    type: 'local',
    memory: true,
    maxMemoryValueLength: 300
};
var globalCache = {};
var CustomStorage = /** @class */ (function () {
    function CustomStorage(options) {
        if (options === void 0) { options = {}; }
        this.cache = globalCache;
        this.options = tslib_1.__assign({}, DEFAULT_OPTIONS, options);
        var _a = this.options, id = _a.id, memory = _a.memory;
        var store;
        try {
            store = this.options.type === 'session' ? window.sessionStorage : window.localStorage;
            store.setItem('bs_:)_', '__');
            store.removeItem('bs_:)_');
        }
        catch (e) {
            /* istanbul ignore next */
            warn_1.warn(this.options.type + "Storage is not available, fallback to memory cache.");
            store = null;
        }
        if (!store)
            memory = true;
        this.id = id;
        this.memory = memory;
        this.store = store;
    }
    /**
     * 在不新建 Storage 实例的情况下，同步更新其它 ID 中的存储
     * @param {(string | string[])} ids - 所有需要同步更新的 ID
     * @param {(id: string) => void} fn - 执行更新的回调函数
     * @memberof CustomStorage
     */
    CustomStorage.prototype.sync = function (ids, fn) {
        var _this = this;
        var originalId = this.options.id;
        array_1.toArray(ids).forEach(function (id) {
            _this.options.id = id;
            fn.call(_this, id);
        });
        this.options.id = originalId;
    };
    /**
     * 设置存储
     * @param {string} key  - 存储的键名
     * @param {*} value - 存储的值
     * @param {number} [seconds] - 存储过期时间，默认永不过期
     * @memberof CustomStorage
     */
    CustomStorage.prototype.set = function (key, value, seconds) {
        var storeKey = this.getStoreKey(key);
        var expiredAt = seconds ? Date.now() + seconds * 1000 : 0;
        value = JSON.stringify([value, expiredAt]);
        if (this.memory) {
            if (value.length <= this.options.maxMemoryValueLength)
                this.cache[storeKey] = value;
            else
                delete this.cache[storeKey];
        }
        if (this.store) {
            this.store.setItem(storeKey, value);
        }
    };
    /**
     * 获取指定的存储的值
     * @template T
     * @param {string} key  - 存储的键名
     * @param {*} [defaultValue] - 如果存储不存在或过期，则返回此值
     * @returns {T} 存储的值
     * @memberof CustomStorage
     */
    CustomStorage.prototype.get = function (key, defaultValue) {
        var obj = this.rawget(key);
        return obj ? obj.value : defaultValue;
    };
    /**
     * 判断指定的存储是否存在
     * @param {string} key - 存储的键名
     * @returns {boolean} 是否存在
     * @memberof CustomStorage
     */
    CustomStorage.prototype.has = function (key) {
        return !!this.rawget(key);
    };
    /**
     * 删除指定的存储
     * @param {string} key - 存储的键名
     * @memberof CustomStorage
     */
    CustomStorage.prototype.del = function (key) {
        var storeKey = this.getStoreKey(key);
        if (this.memory)
            delete this.cache[storeKey];
        if (this.store)
            this.store.removeItem(storeKey);
    };
    /**
     * 清空当前 Storage
     * @memberof CustomStorage
     */
    CustomStorage.prototype.empty = function () {
        var _this = this;
        if (this.memory) {
            this.filter(this.cache, function (storeKey) { return delete _this.cache[storeKey]; });
        }
        if (this.store) {
            this.filter(this.store, function (storeKey) { return _this.store.removeItem(storeKey); });
        }
    };
    CustomStorage.prototype.filter = function (obj, fn) {
        var keyPrefix = this.getKeyPrefix();
        Object.keys(obj).forEach(function (storeKey) {
            if (storeKey.indexOf(keyPrefix) === 0)
                fn(storeKey);
        });
    };
    CustomStorage.prototype.getKeyPrefix = function () {
        var id = this.options.id;
        return "__cs:" + id + "__";
    };
    CustomStorage.prototype.getStoreKey = function (key) {
        return this.getKeyPrefix() + key;
    };
    CustomStorage.prototype.rawget = function (key) {
        var storeKey = this.getStoreKey(key);
        var rawVal = this.memory && this.cache[storeKey] || this.store && this.store.getItem(storeKey);
        if (!rawVal)
            return;
        try {
            var _a = JSON.parse(rawVal), value = _a[0], expiredAt = _a[1];
            if (expiredAt && Date.now() > expiredAt) {
                this.del(key);
                return;
            }
            return { value: value };
        }
        catch (e) {
            return;
        }
    };
    return CustomStorage;
}());
exports.CustomStorage = CustomStorage;
exports.storage = new CustomStorage({ id: 'default' });

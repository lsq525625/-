"use strict";
/*

  leading :  开始是否执行
  trailing:  末尾是否执行

  debounce: {
    leading: false
    trailing: true
  }

  throttle: {
    leading: true
    trailing: true
  }
 */
Object.defineProperty(exports, "__esModule", { value: true });
function debounce(fn, wait) {
    var sid;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (sid) {
            clearTimeout(sid);
            sid = null;
        }
        sid = setTimeout(function () { return fn.apply(void 0, args); }, wait);
    };
}
exports.debounce = debounce;
function throttle(fn, wait) {
    var lastCall = 0;
    var sid;
    var clearSid = function () {
        if (sid) {
            clearTimeout(sid);
            sid = null;
        }
    };
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var run = function () {
            fn.apply(void 0, args);
            lastCall = Date.now();
        };
        clearSid();
        if (Date.now() - lastCall >= wait) {
            run();
        }
        else {
            // 保证 trailing 一定执行
            sid = setTimeout(run, wait);
        }
    };
}
exports.throttle = throttle;
function async(fn, wait) {
    if (wait === void 0) { wait = 0; }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        setTimeout(function () { return fn.apply(void 0, args); }, wait);
    };
}
exports.async = async;
/**
 * 如果 wait > 0，才会异步执行 fn，否则同步执行 fn
 *
 * 上面的返回的都是函数，此方法是直接执行函数
 */
function delay(fn, wait) {
    if (wait === void 0) { wait = 0; }
    if (wait && wait > 0)
        setTimeout(fn, wait);
    else
        fn();
}
exports.delay = delay;
/**
 * 返回 Promise，可以这样使用
 *
 * ```
 * await sleep(3000)
 * ```
 */
function sleep(ms) {
    return new Promise(function (resolve) { return setTimeout(resolve, ms); });
}
exports.sleep = sleep;

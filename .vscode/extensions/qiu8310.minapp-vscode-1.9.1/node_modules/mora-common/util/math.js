"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 获取两个数的最大公约数  Greatest common divisor (GCD)
 *
 * Use recursion. Base case is when y equals 0. In this case, return x.
 * Otherwise, return the GCD of y and the remainder of the division x/y
 *
 * @example
 * gcd(10, 4) => 2
 */
function gcd(x, y) {
    return !y ? x : gcd(y, x % y);
}
exports.gcd = gcd;
/**
 * 获取两个数的最小公倍数 lowest common multiple
 *
 * @example
 * lcm(10, 4) => 20
 */
function lcm(x, y) {
    return (x * y) / gcd(x, y);
}
exports.lcm = lcm;
var cache = { cos: {}, sin: {}, tan: {} };
exports.DEGREE_TO_RADIAN_FRACTOR = Math.PI / 180;
function degree2radian(degree) {
    return degree * exports.DEGREE_TO_RADIAN_FRACTOR;
}
exports.degree2radian = degree2radian;
function xcos(degree) {
    degree = period(degree, 360);
    if (cache.cos[degree] == null)
        cache.cos[degree] = Math.cos(degree2radian(degree));
    return cache.cos[degree];
}
exports.xcos = xcos;
function xsin(degree) {
    degree = period(degree, 360);
    if (cache.sin[degree] == null)
        cache.sin[degree] = Math.sin(degree2radian(degree));
    return cache.sin[degree];
}
exports.xsin = xsin;
function xtan(degree) {
    degree = period(degree, 180);
    if (cache.tan[degree] == null)
        cache.tan[degree] = Math.tan(degree2radian(degree));
    return cache.tan[degree];
}
exports.xtan = xtan;
function between(value, min, max) {
    return Math.min(Math.max(min, value), max);
}
exports.between = between;
/**
 * 最小周期内的值
 *
 * @example
 *
 * period(3, 60)  -> 3
 * period(61, 60) -> 1
 */
function period(value, length) {
    if (value < 0) {
        return (value % length) + length;
    }
    else if (value < length) {
        return value;
    }
    else {
        return value % length;
    }
}
exports.period = period;
/**
 * 返回一个 >= min && < max 的数
 */
function random(min, max, integer) {
    return integer
        ? Math.floor(Math.random() * (max - min + 1)) + min
        : Math.random() * (max - min) + min;
}
exports.random = random;
/**
 * 计算数组中的数字的平均值
 */
function average(arr) {
    return arr.reduce(function (acc, val) { return acc + val; }, 0) / arr.length;
}
exports.average = average;
/**
 * 计算数组中的数字的总和
 */
function sum(arr) {
    return arr.reduce(function (acc, val) { return acc + val; }, 0);
}
exports.sum = sum;
/**
 * Rounds a number to a specified amount of digits
 *
 * Use Math.round() and template literals to round the number to the specified
 * number of digits. Omit the second argument, decimals to round to an integer.
 *
 * @example
 * round(1.005, 2) -> 1.01
 */
function round(n, decimals) {
    if (decimals === void 0) { decimals = 0; }
    return Number(Math.round(n + "e" + decimals) + "e-" + decimals);
}
exports.round = round;

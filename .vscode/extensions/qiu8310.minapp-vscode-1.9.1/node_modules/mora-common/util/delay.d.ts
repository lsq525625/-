export declare function debounce(fn: (...args: any[]) => void, wait: number): (...args: any[]) => void;
export declare function throttle(fn: (...args: any[]) => void, wait: number): (...args: any[]) => void;
export declare function async(fn: (...args: any[]) => void, wait?: number): (...args: any[]) => void;
/**
 * 如果 wait > 0，才会异步执行 fn，否则同步执行 fn
 *
 * 上面的返回的都是函数，此方法是直接执行函数
 */
export declare function delay(fn: () => void, wait?: number): void;
/**
 * 返回 Promise，可以这样使用
 *
 * ```
 * await sleep(3000)
 * ```
 */
export declare function sleep(ms: number): Promise<void>;

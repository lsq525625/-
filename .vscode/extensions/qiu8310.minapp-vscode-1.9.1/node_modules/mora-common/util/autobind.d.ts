/**
 * @template O                        - 对象实例
 * @param {any} target                  - 对象实例
 * @param {string} method             - 对象实例上的一个方法的名称
 * @param {PropertyDescriptor} desc   - 方法的 descriptor
 */
export declare function autobind(target: any, method: string, desc: PropertyDescriptor): PropertyDescriptor;
/**
 * @template F - 继承自 T 的类型，可以是 class
 * @template T - 继承自 Function 的类型，可以是 class
 * @param {F} fromCtor - 起始 class
 * @param {(T | string[])} [toCtorOrWontBinds] - 结束 class 或者是不需要绑定的方法的名称（默认是 React 生命周期相关的函数）
 */
export declare function autobind<F extends T, T extends Function>(fromCtor: F, toCtorOrWontBinds?: T | string[]): F;
/**
 * @template F  - 继承自 T 的类型，可以是 class
 * @template T  - 继承自 Function 的类型，可以是 class
 * @param {F} fromCtor                - 起始 class
 * @param {T} toCtor                  - 结束 class
 * @param {string[]} [wontBinds = WONT_BIND]  - 不自动 bind 的所有方法的名称（默认是 React 生命周期相关的函数）
 */
export declare function autobind<F extends T, T extends Function>(fromCtor: F, toCtor?: T, wontBinds?: string[]): F;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * 按先后顺序一个个用 run 函数来运行 tasks 中的字段
 *
 * @export
 * @template T
 * @template R
 * @param {T[]} tasks 要运行的任务
 * @param {(task: T) => Promise<R>} run 运行函数
 * @returns {Promise<R[]>} 返回每个 tasks 对应的结果组成的数组
 */
function series(tasks, run) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _this = this;
        var result, handle, _a, _b;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    result = [];
                    if (!tasks.length)
                        return [2 /*return*/, result];
                    handle = tasks.slice(1).reduce(function (prev, task, index, ref) {
                        return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return tslib_1.__generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _b = (_a = result).push;
                                        return [4 /*yield*/, prev()];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [4 /*yield*/, run(task, index + 1, ref)];
                                    case 2: return [2 /*return*/, _c.sent()];
                                }
                            });
                        }); };
                    }, function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, run(tasks[0], 0, tasks)];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    }); }); });
                    _b = (_a = result).push;
                    return [4 /*yield*/, handle()];
                case 1:
                    _b.apply(_a, [_c.sent()]);
                    return [2 /*return*/, result];
            }
        });
    });
}
exports.series = series;
function map(tasks, iterator, limit) {
    if (limit === void 0) { limit = 1; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var finished = false;
                    var runningCount = 0;
                    var result = new Array(tasks.length);
                    var done = function (err) {
                        if (!finished) {
                            finished = true;
                            err ? reject(err) : resolve(result);
                        }
                    };
                    var queue = tasks.map(function (task, index, ref) { return function () {
                        runningCount++;
                        iterator(task, index, ref)
                            .then(function (res) {
                            result[index] = res;
                            runningCount--;
                            run();
                        })
                            .catch(done);
                        run();
                    }; });
                    var runnable = function () { return (!limit || limit > runningCount) && queue.length; };
                    var run = function () {
                        if (finished || !queue.length && !runningCount) {
                            done();
                        }
                        else if (runnable()) {
                            queue.shift()();
                        }
                    };
                    run();
                })];
        });
    });
}
exports.map = map;
function replace(src, gregexp, iterator, limit) {
    if (limit === void 0) { limit = 1; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var matches, mat, replacers, i, result, lastIndex, replacer, match, raw;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    matches = [];
                    /* tslint:disable: no-conditional-assignment */
                    while ((mat = gregexp.exec(src))) {
                        matches.push(mat);
                    }
                    return [4 /*yield*/, map(matches, iterator, limit)];
                case 1:
                    replacers = _a.sent();
                    i = replacers.length;
                    result = [];
                    lastIndex = src.length;
                    while (i--) {
                        replacer = replacers[i];
                        match = matches[i];
                        raw = match[0];
                        result.unshift(replacer + src.substring(match.index + raw.length, lastIndex));
                        lastIndex = match.index;
                    }
                    if (lastIndex)
                        result.unshift(src.substring(0, lastIndex));
                    return [2 /*return*/, result.join('')];
            }
        });
    });
}
exports.replace = replace;

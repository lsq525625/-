"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 将单个元素转化成数组，保证结果一定是个数据
 *
 * 注意，不要用在 toArray(arguments) 上
 */
function toArray(item) {
    return Array.isArray(item) ? item : [item];
}
exports.toArray = toArray;
/**
 * 对数组去重
 */
function unique(items, uniqueKey) {
    return items.reduce(function (result, item) {
        if (uniqueKey) {
            if (result.every(function (_) { return _[uniqueKey] !== item[uniqueKey]; }))
                result.push(item);
        }
        else {
            if (result.indexOf(item) < 0)
                result.push(item);
        }
        return result;
    }, []);
}
exports.unique = unique;
/**
 * 打乱数据
 *
 * 先给每项生成一个随机数，再对随机数进行排序
 */
function shuffle(arr) {
    var r = arr.map(function (v) { return ({ key: v, value: Math.random() }); });
    return r.sort(function (a, b) { return a.value - b.value; }).map(function (v) { return v.key; });
}
exports.shuffle = shuffle;
/**
 * Returns a random element from an array
 */
function sample(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
exports.sample = sample;
/**
 * Head of list
 *
 * return arr[0]
 */
function head(arr) {
    return arr[0];
}
exports.head = head;
/**
 * Last of list
 */
function last(arr) {
    return arr.slice(-1)[0];
}
exports.last = last;
/**
 * 初始化一个数字组成的数组
 */
function initial(end, start) {
    if (start === void 0) { start = 0; }
    return Array.apply(null, Array(end - start)).map(function (v, i) { return i + start; });
}
exports.initial = initial;
/**
 * Use reduce() combined with map() to iterate over elements and
 * combine into an array containing all combinations.
 *
 * @example
 *
 * powerset([1,2]) -> [[], [1], [2], [2,1]]
 */
function powerset(arr) {
    return arr.reduce(function (a, v) { return a.concat(a.map(function (r) { return [v].concat(r); })); }, [[]]);
}
exports.powerset = powerset;
/**
 * Flatten array
 *
 * Use reduce() to get all elements inside the array and concat() to flatten them
 *
 * @example
 *
 * flatten([1,[2],3,4]) -> [1,2,3,4]
 */
function flatten(arr) {
    return arr.reduce(function (a, v) { return a.concat(v); }, []);
}
exports.flatten = flatten;

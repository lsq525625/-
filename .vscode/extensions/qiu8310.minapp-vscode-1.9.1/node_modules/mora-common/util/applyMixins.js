"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var array_1 = require("./array");
// 注意此库中的 autobind 后会去除 value 属性，需要无法在 autobind 之后的函数上使用 merges
// 也无法在 getter setter 方法上使用 merges，因为它们也都没有 value
function applyMixins(toCtor, fromCtors, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.overwrites, overwrites = _c === void 0 ? [] : _c, _d = _b.merges, merges = _d === void 0 ? [] : _d;
    var exists = Object.getOwnPropertyNames(toCtor.prototype);
    array_1.toArray(fromCtors).forEach(function (fromCtor) {
        if (!fromCtor)
            return;
        var fromProp = typeof fromCtor === 'function' ? fromCtor.prototype : fromCtor;
        Object.getOwnPropertyNames(fromProp).forEach(function (name) {
            if (name !== 'constructor') {
                var fromDesc_1 = Object.getOwnPropertyDescriptor(fromProp, name);
                if (exists.indexOf(name) < 0 || overwrites.indexOf(name) >= 0) {
                    Object.defineProperty(toCtor.prototype, name, fromDesc_1);
                }
                else if (merges.indexOf(name) >= 0) {
                    var toDesc_1 = Object.getOwnPropertyDescriptor(toCtor.prototype, name);
                    // merge 的必须要是函数
                    if (toDesc_1 && typeof toDesc_1.value === 'function' && typeof fromDesc_1.value === 'function') {
                        Object.defineProperty(toCtor.prototype, name, tslib_1.__assign({}, toDesc_1, { value: function () {
                                fromDesc_1.value.apply(this, arguments);
                                toDesc_1.value.apply(this, arguments);
                            } }));
                    }
                }
            }
            // 下面方法不好地方在于，如果 class 中定义了 get 会触发 get 函数的执行
            // 而函数此时还没初始化，可能会报错
            // if (name !== 'constructor' && !toCtor.prototype[name]) {
            //   toCtor.prototype[name] = Ctor.prototype[name]
            // }
        });
    });
    return toCtor;
}
exports.applyMixins = applyMixins;

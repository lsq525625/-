/**
 * 将单个元素转化成数组，保证结果一定是个数据
 *
 * 注意，不要用在 toArray(arguments) 上
 */
export declare function toArray<T>(item: T | T[]): T[];
/**
 * 对数组去重
 */
export declare function unique<T, K extends keyof T>(items: T[], uniqueKey?: K): T[];
/**
 * 打乱数据
 *
 * 先给每项生成一个随机数，再对随机数进行排序
 */
export declare function shuffle<T>(arr: T[]): T[];
/**
 * Returns a random element from an array
 */
export declare function sample<T>(arr: T[]): T;
/**
 * Head of list
 *
 * return arr[0]
 */
export declare function head<T>(arr: T[]): T;
/**
 * Last of list
 */
export declare function last<T>(arr: T[]): T;
/**
 * 初始化一个数字组成的数组
 */
export declare function initial(end: number, start?: number): number[];
/**
 * Use reduce() combined with map() to iterate over elements and
 * combine into an array containing all combinations.
 *
 * @example
 *
 * powerset([1,2]) -> [[], [1], [2], [2,1]]
 */
export declare function powerset<T>(arr: T[]): T[][];
/**
 * Flatten array
 *
 * Use reduce() to get all elements inside the array and concat() to flatten them
 *
 * @example
 *
 * flatten([1,[2],3,4]) -> [1,2,3,4]
 */
export declare function flatten<T>(arr: any[]): T[];
